---
title: "Hands on Exercise 05e: Treemap Visualisation with R"
author: "Yee Jun Yit"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## Overview

In this exercise, we will be designing treemaps using the appropriate R packages. There will be three sections to the exercise:

First, we will manipulate transaction data into a treemap strcuture by using selected functions provided in the **dplyr** package.
Second, we will plot static treemaps by using the **treemap** package.
Third, we will design an interactive treemap by using the **d3treeR** package.

## Loading Data

We will be using the following packages:

-  [**treemap**](https://www.rdocumentation.org/packages/treemap/versions/2.4-4), for draw treemaps, a space-filling visualization of hierarchical structures.
-  [**treemapify**](https://www.rdocumentation.org/packages/treemapify/versions/2.5.5) provides **ggplot2** geoms for drawing treemaps.;
-  tidyverse, a family of R packages for data science processes.

```{r}
pacman::p_load(treemap, treemapify, tidyverse)
```

We will be using *REALIS2018.csv*, which provides information of private property transaction records in Singapore from 2018.

```{r}
realis2018 <- read_csv("data/realis2018.csv")
```

## Data Wrangling

The tibble data.frame *realis2018* is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frame that is appropriate for treemap visualisation:

-  group transaction records by *Project Name*, *Planning Region*, *Planning Area*, *Property Type* and *Type of Sale*, and
-  compute *Total Unit Sold*, *Total Area*, *Median Unit Price* and *Median Transacted Price* by applying appropriate summary statistics on *No. of Units*, *Area (sqm)*, *Unit Price ($ psm)* and *Transacted Price ($)* respectively.

Two key verbs (functions) of **dplyr** package, namely: `group_by()` and `summarize()` will be used to perform these steps.

`group_by()` breaks down a data.frame into specified groups of rows. When the verbs above are applied on the resulting object they’ll be automatically applied “by group”.

Grouping affects the verbs as follows:

-  grouped `select()` is the same as ungrouped `select()`, except that grouped variables are always retained.
-  grouped `arrange()` is the same as ungrouped; unless you set `.by_group = TRUE`, in which case it orders first by the grouping variables.
-  `mutate()` and `filter()` are most useful in conjunction with window functions (like `rank()`, or `min(x) == x`). They are described in detail in vignette(“window-functions”).
-  `sample_n()` and `sample_frac()` sample the specified number/fraction of rows in each group.
-  `summarise()` computes the summary for each group.

This [webpage](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html) provides some useful context on **dplyr** methods.

In our case, `group_by()` will used together with `summarise()` to derive the summarised data.frame.

### Grouped summaries without the Pipe

We perform the steps above, and save the grouped and summarised data as different objects with the following:

```{r, warning=FALSE}
realis2018_grouped <- group_by(realis2018, `Project Name`, `Planning Region`, `Planning Area`, `Property Type`, `Type of Sale`)

realis2018_summarised <- summarise(realis2018_grouped, `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), `Total Area` = sum(`Area (sqm)`, na.rm = TRUE), `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

::: {.callout-note}

#### Note

Aggregation functions such as `sum()` and `meadian()` obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument `na.rm = TRUE` removes the missing values prior to computation.

:::

The code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.

### Grouped summaries with the *pipe*

A more efficient way to tackle the same processes by using the pipe `%>%` is shown below:

```{r, warning=FALSE}
realis2018_summarised <- realis2018 %>% 
  group_by(`Project Name`,`Planning Region`, 
           `Planning Area`, `Property Type`, 
           `Type of Sale`) %>%
  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),
            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

## Designing Treemap with treemap Package

**treemap** package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: `treemap()` offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.

### Designing a static treemap

In this section, `treemap()` of **Treemap** package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017. We will use records belonging to "resale condominium" property type from *realis2018_selected* data frame.

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == "Condominium", `Type of Sale` == "Resale")
```

### Using the basic arguments

We design a treemap by using three core arguments of `treemap()`, namely: `index`, `vSize` and `vColor`.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: {.callout-note}

#### Things to learn from the arguments used

Index

-  The index vector must consist of at least two column names or else no hierarchy treemap will be plotted.
-  If multiple column names are provided, as above, the first name forms the highest aggregation level, the second name forms the second highest aggregation level, and so on.

vSize

-  The column must not contain negative values. This is because its values will be used to map the sizes of the rectangles of the treemaps.
:::

::: {.callout-warning}

#### Warning

The treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.

For `treemap()`, `vColor` is used in combination with the argument type to determines the colours of the rectangles. Without defining `type`, as is the case above, `treemap()` assumes `type = "index"`, which in our case is the hierarchy of planning areas.
:::

### Working with *vColor* and *type* arguments

We now define the `type` argument as `type = "value"`

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type = "value",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
::: {.callout-note}

#### Things to learn from the code above


-  The rectangles are coloured with different intensities of green, reflecting their respective median unit prices.
-  The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.

:::

### Colours in treemap package

There are two arguments that determine the mapping to color palettes: `mapping` and `palette`. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.

### The “value” type treemap

The following is a "value" type treemap with a different colour palette.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```


::: {.callout-note}

#### Things to learn from the code above


-  Although the colour palette used is `RdYlBu`, there are no red rectangles in the treemap above. This is because all the median unit prices are positive.
-  We see only 5000 to 45000 in the legend because the `range` argument is at its default `c(min(values, max(values))` with rounding.

:::

### The “manual” type treemap

The “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: {.callout-note}

#### Things to learn from the code above

The colour scheme used is very confusing. This is because `mapping = (min(values), mean(range(values)), max(values))`. It is not wise to use diverging colour palette such as "RdYlBu" if the values are all positive or negative

:::

The confusion can be overcome by using a single colour palette such as "Blues".

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

### Treemap Layout

`treemap()` supports two popular treemap layouts, namely: "squarified" and "pivotSize". The default is "pivotSize".

The squarified treemap algorithm ([Bruls et al., 2000](https://vanwijk.win.tue.nl/stm.pdf)) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, with its "pivot-by-size" algorithm ([Bederson et al., 2002](https://www.cs.umd.edu/~ben/papers/Bederson2002Ordered.pdf)) takes the sorting order (sortID) into account, with acceptable aspect ratios.

### Working with `algorithm` argument

We plot a "squarified" treemap by changing the `algorithm` argument

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "squarified",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
### Using *sortID*

When “pivotSize” `algorithm` is used, the *sortID* argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "pivotSize",
        sortID = "Median Transacted Price",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## Designing Treemap using treemapify Package

**treemapify** is a R package specially developed to draw treemaps in **ggplot2**. In this section, we will  design treemps to closely resemble treemaps in the previous section by using **treemapify**. The [Introduction to “treemapify”](https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html) and [user guide](https://cran.r-project.org/web/packages/treemapify/treemapify.pdf) are useful here.

### Designing a basic treemap

```{r}
#| fig-width: 12
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`),
       layout = "scol",
       start = "bottomleft") + 
  geom_treemap() +
  scale_fill_gradient(low = "light blue", high = "blue")
```
### Defining hierarchy

We group by Planning Region.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`),
       start = "topleft") + 
  geom_treemap()
```

Make another group by Planning Area.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap()
```

Add boundary lines i.e. borders

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap() +
  geom_treemap_subgroup2_border(colour = "gray40",
                                size = 2) +
  geom_treemap_subgroup_border(colour = "gray20")
```

Add text for clarity

```{r}
ggplot(data = realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap() +
  geom_treemap_subgroup2_border(colour = "gray40", size = 2) +
  geom_treemap_subgroup_border(colour = "gray20") +
  geom_treemap_subgroup_text(place = "centre", grow = TRUE, alpha = 0.8, colour = "white", fontface = "bold") + 
  geom_treemap_subgroup2_text(place = "centre", grow = TRUE, alpha = 0.8, colour = "white", fontface = "italic")
```

## Designing Interactive Treemap using d3treeR

### Installing **d3treeR** package

This package is available in CRAN as **d3Tree**, but is not a stable working environment yet. We use the one available on github instead.

1.  We first need to install ***devtools*** package.
```{r}
install.packages("devtools")
```

2.  Then, we load the ***devtools*** library and install the **d3treeR** package from github by using the codes below.

```{r}
library(devtools)
install_github("timelyportfolio/d3treeR")
```

3.  We can now load the **d3treeR** package.

```{r}
library(d3treeR)
```

### Designing An Interactive Treemap

The codes below perform two processes:

1.  `treemap()` is used to build a treemap by using selected variables in the condominium data.frame. The treemap created is save as object called tm.

```{r}
tm <- treemap(realis2018_summarised,
        index=c("Planning Region", "Planning Area"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        title="Private Residential Property Sold, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
tm
```
Then, `d3tree()` is used to build an interactive treemap.

```{r}
d3tree(tm, rootname = "Singapore" )
```

