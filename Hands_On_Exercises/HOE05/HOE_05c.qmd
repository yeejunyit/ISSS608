---
title: "Hands on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data"
author: "Yee Jun Yit"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## Overview

Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observations (or records) in rows and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.

In this exercise, we will use R to plot static and interactive heatmaps for visualising and analysing multivariate data.

## Loading Data

We will be using the following packages:

-  [**seriation**](https://www.rdocumentation.org/packages/seriation/versions/1.4.1) provides reordered heatmaps, color images and clustering visualizations like dissimilarity plots, and visual assessment of cluster tendency plots;
-  [**heatmaply**](https://www.rdocumentation.org/packages/heatmaply/versions/1.4.2/topics/heatmaply) provides the needed information for producing a heatmap;
-  [**dendextend**](https://www.rdocumentation.org/packages/dendextend/versions/1.18.1) provides general functions for handling tree-like structures;
-  tidyverse, a family of R packages for data science processes.

```{r}
pacman::p_load(seriation, heatmaply, dendextend, tidyverse)
```

We will be using the [World Happiness Report 2018](https://worldhappiness.report/ed/2018/), which has be extracted and reduced to a simplified csv.

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

We will need to change the rows to be indexed by country name instead of row number, which we do as follows:

```{r, warning=FALSE}
row.names(wh) <- wh$Country
```
We will need the data to be in a matrix form to make the heatmap, but the data is in the form of a tibble (data frame). We will transform the data frame into a data matrix as follows:

```{r}
wh1 <- dplyr::select(wh, c(3, 7:12))
wh_matrix <- data.matrix(wh)
```

## Static Heatmap

There are many R packages and functions that can be used to drawing static heatmaps:

-  [heatmap()](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/heatmap) of R stats package. It draws a simple heatmap.
-  [heatmap.2()](https://www.rdocumentation.org/packages/gplots/versions/3.0.1.1/topics/heatmap.2) of **gplots** R package. It draws an enhanced heatmap compared to the R base function.
-  [pheatmap()](https://www.rdocumentation.org/packages/pheatmap/versions/1.0.12/topics/pheatmap) of [**pheatmap**](https://www.rdocumentation.org/packages/pheatmap/versions/1.0.12/topics/pheatmap) R package. **pheatmap** is short for Pretty Heatmap, which provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.
-  [**ComplexHeatmap**](https://bioconductor.org/packages/release/bioc/html/ComplexHeatmap.html) package of R/Bioconductor package. It draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available [here](https://jokergoo.github.io/ComplexHeatmap-reference/book/).
-  [**superheat**](https://www.rdocumentation.org/packages/superheat/versions/0.1.0/topics/superheat) package. It is a system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here. [here](https://rlbarter.github.io/superheat/).

In this section, we will plot static heatmaps by using *heatmap()* of **R Stats** package.

### heatmap() of R Stats

It is quite straighforward to plot a cluster heatmap

```{r}
heatmap(wh_matrix)
```
The order of both rows and columns is different compared to the native wh_matrix. This is because the heatmap does a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap visualize how clusters are formed and how they merge at different levels of similarity.

::: {.callout-note}

#### Note

-  By default, `heatmap()` plots a cluster heatmap. The arguments `Rowv=NA` and `Colv=NA` are used to switch off the option of plotting the row and column dendrograms.
:::

```{r}
wh_heatmap <- heatmap(wh_matrix,
                      Rowv=NA, Colv=NA)
```
Here, red cells denotes small values of correlation, and yellow big calues of correlation. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, which makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the `scale` argument. This can be applied to rows or to columns following one's needs.

Here, we normalise the matrix column-wise

```{r}
wh_heatmap <- heatmap(wh_matrix,
                      scale="column",
                      cexRow = 0.6,
                      cexCol = 0.8,
                      margins = c(10, 4),
                      Rowv=NA, Colv=NA)
```
Notice that the values are scaled now. Also note that `margins` argument is used to ensure that the entire x-axis labels are displayed completely and, `cexRow` and `cexCol` arguments are used to define the font size used for y-axis and x-axis labels respectively.


## Creating Interactive Heatmaps

[**heatmaply**](http://talgalili.github.io/heatmaply/index.html) is an R package for building interactive cluster heatmaps that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.

[Introduction to Heatmaply](https://cran.r-project.org/web/packages/heatmaply/vignettes/heatmaply.html) provides an overall understanding of the features and functions of Heatmaply package. The [user manual](https://cran.r-project.org/web/packages/heatmaply/heatmaply.pdf) of the package also proves handy for reference purposes.

In this section, we will use **heatmaply** to design an interactive cluster heatmap. We will exclude the country, region and outliers from the heatmap.

```{r}
heatmaply(wh_matrix[, -c(1, 2, 4, 5)])
```

::: {.callout-note}

#### Note

-  Different from `heatmap()`, for `heatmaply()` the default horizontal dendrogram is placed on the right hand side of the heatmap.
-  The text label of each row, on the other hand, is placed on the left hand side of the heat map.
-  When the x-axis marker labels are too long, they will be rotated by 135 degrees from north.
:::

### Data trasformation

When analysing multivariate data sets, it is very common that the variables in the data set includes values that reflect different types of measurements. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation is commonly carried out before clustering.

The three main data transformation methods supported by `heatmaply()` are: `scale`, `normalise` and `percentilse.`

#### Scaling method

When all variables come from or are assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution. distribution. In such a case, each value would reflect the distance from the mean in units of standard deviation.

The *scale* argument in *heatmaply()* supports column and row scaling. In this visual we will scale variable values only columnwise:

```{r}
heatmaply(wh_matrix[, -c(1, 2, 4, 5)],
          scale = "column")
```

#### Normalising method

When variables in the data come from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations. This preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.

Different from Scaling, the normalise method is performed on the entierty of the input data set i.e. on wh_matrix


```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))
```

#### Percentising method

This is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.  This is done by using the empirical cumulative distribution function (ecdf) of the variables on their own values, bringing each value to its empirical percentile.  The benefit of the percentize function is that each value has a relatively clear interpretation, which is the percent of observations that have that particular value or below.

Similarly to the Normalize method, the Percentize method is performed on the entierty of the input data set i.e. on wh_matrix

```{r}
heatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))
```

### Clustering algorithms

**heatmaply** supports a variety of hierarchical clustering algorithms. The main arguments are:

-  *distfun*: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).
-  *hclustfun*: function used to compute the hierarchical clustering when *Rowv* or *Colv* are not dendrograms. Defaults to *hclust.*
-  *dist_method* default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default *distfun* is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.
-  *hclust_method* default is NULL, which results in “complete” method being used. It can accept alternative character strings indicating the method to be passed to *hclustfun*. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).

In general, a clustering model can be calibrated either manually or statistically.

### The Manual Approach

Here, the heatmap is plotted by using a hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          dist_method = "euclidean",
          hclust_method = "ward.D")
```

### The Statistical Approach

In order to determine the best clustering method and number of clusters, the *dend_expend()* and *find_k()* functions of **dendextend** package will be used.

First, `dend_expend()` will be used to determine the recommended clustering method to be used.

```{r}
wh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = "euclidean")

dend_expend(wh_d)[[3]]
```

The output table shows that the “average” method should be used because it gives the highest value.

Next, `find_k()` is used to determine the optimal number of clusters.

```{r}
wh_clust <- hclust(wh_d, method = "average")
num_k <- find_k(wh_clust)
plot(num_k)
```

The figure above shows that k=3 would be the optimum.

We then plot the heatmap with the optimum results.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          dist_method = "euclidean",
          hclust_method = "average",
          k_row = 3)
```

### Seriation

One of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. For example, with three items A, B and C, if you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It also doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.

**heatmaply** uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.

Here we have our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here we see the result of applying Optimal Leaf Ordering to the same clustering result as the normalised heatmap above.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "OLO")
```

The default option is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "GW")
```

The “mean” option gives the output we would get by default from heatmap functions in other packages such as **gplots**' `heatmap.2`.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "mean")
```

The option “none” gives us the dendrograms without any rotation that is based on the data matrix.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "none")
```

### Working with colour palettes

The The default colour palette uses by **heatmaply** is *viridis*. However, users can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.

Here, we use the `Blues` colour palette of **RColorBrewer** package.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "none",
          colors = Blues)
```

### The finishing touch

Besides providing a wide collection of arguments for meeting the statistical analysis needs, **heatmaply** also provides many plotting features to ensure a cartographic quality heatmap can be produced.

In the code chunk below the following arguments are used:

-  `k_row` is used to produce 5 groups.
-  `margins` is used to change the top margin to 60 and row margin to 200.
-  `fontsizw_row` and `fontsize_col` are used to change the font size for row and column labels to 4.
-  `main` is used to write the main title of the plot.
-  `xlab` and `ylab` are used to write the x-axis and y-axis labels respectively.


```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="World Happiness Score and Variables by Country, 2018 \nDataTransformation using Normalise Method",
          xlab = "World Happiness Indicators",
          ylab = "World Countries"
          )
```

