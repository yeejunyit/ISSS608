---
title: "Hands on Exercise 05b: Creating Ternary Plots with R"
author: "Yee Jun Yit"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## Overview

Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.

In this exercise, we will build ternary plots programmatically using R for visualising and analysing the population structure of Singapore.

We will follow 4 steps for this exercise:

(1) Install and launch **tidyverse** and **ggtern** packages
(2) Derive three new measures using `mutate()` function of **dplyr** package
(3) Build a static ternary plot using `ggtern()` function of **ggtern** package
(4) Build an interactive ternary plot using *plot-ly()* function of **Plotly R** package.

## Loading Data

We will use two main R packages for this hands-on exercise. They are:

-  [ggtern](https://cran.r-project.org/web/packages/ggtern/ggtern.pdf), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.
-  [Plotly R](https://plotly.com/r/), an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js. The **plotly R** libary contains the *ggplotly* function, which will convert **ggplot2** figures into a Plotly object.
-  tidyverse, a family of R packages for data science processes.

```{r}
pacman::p_load(ggtern, plotly, tidyverse)
```

We will be using the [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) data.

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

We will use the ***mutate()*** function of **dplyr** package to derive three new measures, namely: young, active, and old by unpacking the columns based on year, grouped by their ages using `pivot_wider()`.

```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  pivot_wider(names_from = AG, values_from = Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

## Plotting Ternary Diagram with R

### Plotting a static ternary diagram

We use **ggtern()** function of **ggtern** package to create a simple ternary plot.

```{r}
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

We add a theme for better clarity of visualisation.

```{r}
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2018") +
  theme_rgbw()
```

### Plotting an interative ternary diagram

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Active"), 
  baxis = axis("Young"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~ACTIVE, 
  b = ~YOUNG, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary",
  mode = "markers"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```
