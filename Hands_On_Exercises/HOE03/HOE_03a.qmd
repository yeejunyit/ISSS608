---
title: "Hands on Exercise 03: Interactive Data Visualisations with R"
author: "Yee Jun Yit"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

```{r, echo=FALSE}
knitr::opts_chunk$set(fig.width = 12, fig.height = 6)
```

------------------------------------------------------------------------

## Introduction

In this document, we explore the creation of interactive data visuals using the following packages:

-   **ggiraph**: a R package that makes ggplot graphics interactive.

-   **plotly**: a R package that plots interactive statistical graphs.

-   DT: an interface to the JavaScript library [DataTables](https://datatables.net/) that creates interactive tables on the html page.

-   tidyverse: a family of packages that support data science, analysis and communication tasks with the creation of static statistical graphs.

-   patchwork: for compositing figures created using ggplot.

## Loading Data

Install and load packages and libraries

```{r}
pacman::p_load(ggiraph, plotly, 
               DT, tidyverse, patchwork)
```

Read data file

```{r}
exam_data = read_csv("data/Exam_data.csv")
```

## Interactive Data Visuals: ggiraph methods

`ggiraph` is a htmlwidget and a ggplot2 extension which allows ggplot graphics to be interactive. This is done using [ggplot interactive geometries](https://davidgohel.github.io/ggiraph/reference/index.html#section-interactive-geometries) via the following 3 aesthetics:

-   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   **Data_id**: a column of data-sets that contain an id to be associated with elements.

-   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

### Tooltip effect with tooltip aesthetic

We will plot an interactive statistical graph by using the **ggiraph** package by first creating a ggplot object, then the [girafe()](https://davidgohel.github.io/ggiraph/reference/girafe.html) function of **ggiraph** will be used to create an interactive svg object.

```{r, eval=FALSE}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

Again, we emphasize the two-step process: first, an interactive version of ggplot2 geom (i.e. [geom_dotplot_interactive()](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) will build the basic visual and required settings, and secondly [girafe()](https://davidgohel.github.io/ggiraph/reference/girafe.html) is called as the engine that generates the svg object to be displayed on a html page.

## Interactivity

By hovering our cursor over a data point, we see the student's ID as specified in `aes(tooltip = ID)`

```{r, echo=FALSE}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

### Displaying multiple pieces of information in tooltip

The content of the tooltip can be customised by including a list object as below

```{r, eval=FALSE}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

Observe the first three lines of code create a new column called tooltip in the data which is a concatenation of names from existing columns. This newly created field is then used as the tooltip argument which will show up in the interactive plot.

## Interactivity

By hovering our cursor over a data point, we see the student's ID and Class.

```{r, echo=FALSE}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

### Customising tooltip style

We can use [opts_tooltip()](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of **ggiraph** to customize tooltip rendering by adding css declarations.

```{r, eval=FALSE}
tooltip_css <- "background-color:white;
font-style:bold; color:black;"

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(                                
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(
      css = tooltip_css))
)                                   
```

```{r, echo=FALSE}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

### Customising tooltip style

We can use [opts_tooltip()](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of **ggiraph** to customize tooltip rendering by adding css declarations.

```{r, eval=FALSE}
tooltip_css <- "background-color:white;
font-style:bold; color:black;"

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(                                
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(
      css = tooltip_css))
)                                   
```

Notice now that the tooltip has a white background and black **bolded** text.

```{r, echo=FALSE}
tooltip_css <- "background-color:white;
font-style:bold; color:black;"

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(                                
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(
      css = tooltip_css))
)                                   
```

We will use these [customizations](https://www.ardata.fr/ggiraph-book/customize.html) as a reference to learn more.

### Displaying statistics on tooltip

The code below is an advanved implementation of tooltip customization. Here, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.

```{r, eval=FALSE}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)       #format y (mean) with specified accuracy
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE)) +
  stat_summary(aes(y = MATHS,             #calculates the statistics
                   tooltip = after_stat(
                     tooltip(y, ymax))),
               fun.data = "mean_se",      #mean and standard error of mean
               geom = GeomInteractiveCol, #interactive bar
               fill = "light blue") +
  stat_summary(aes(y = MATHS),
               fun.data = mean_se,
               geom = "errorbar", width = 0.2, linewidth = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

Here a function is used to compute a 90% confidence interval of the mean, and the statistics are then displayed on the tooltip.

```{r, echo=FALSE}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE)) +
  stat_summary(aes(y = MATHS,
                   tooltip = after_stat(
                     tooltip(y, ymax))),
               fun.data = "mean_se",
               geom = GeomInteractiveCol,
               fill = "light blue") +
  stat_summary(aes(y = MATHS),
               fun.data = mean_se,
               geom = "errorbar", width = 0.2, linewidth = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

### Hover Effect with *data_id* aesthetic

The code chunk below shows the second interactive feature of ggiraph, namely `data_id`.

```{r, eval=FALSE}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618    
)
```

In this aesthetic, elements associated with the same *data_id*, which is the CLASS in this case, will be highlighted when a specific data point is moused over.

```{r, echo=FALSE}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618    
)
```

Note that the default value of the hover css is *hover_css = “fill:orange;”*.

#### Changing *data_id* style

We make some style changes using CSS by encoding it directly in the `girafe()` engine `options`

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #202020;"),
    opts_hover_inv(css = "opacity:0.2;") #for non-highlighted data_id
    ) 
)                                       
```

### Combining tooltip and hover effects

There are times when we would want to combine the above two aesthetics we've seen so far

```{r, eval=FALSE}
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = CLASS,
        data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #202020;"),
    opts_hover_inv(css = "opacity:0.2;")
    )
)
```

By combining *tooltip* and *data_id* arguments in `geom_dotplot_interactive()`, elements associated with the same *data_id* (CLASS) will be highlighted upon mouse over, and at the same time the tooltip will show the CLASS

```{r, echo=FALSE}
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = CLASS,
        data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #202020;"),
    opts_hover_inv(css = "opacity:0.2;")
    )
)
```

### Click effect with onclick

The `onclick` aesthetic of ggiraph provides hotlink interactivity on the web.

```{r, eval=FALSE}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",          #sprintf is R string formatter, window.open is JavaScript, %s placeholders 
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(onclick = onclick),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618)
```

The click action must be in the data point for the link to be triggered. Generally clicking in the plot where there is no data point will not trigger the `onclick`.

```{r, echo=FALSE}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(onclick = onclick),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618)
```

### Coordinated Multiple Views with ggiraph

Coordinated multiple views methods has been implemented in the data visualisation below.

::: {.panel-tabset}
#### The plots

```{r, echo=FALSE}
p1 <- ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  coord_cartesian(xlim=c(0,100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

p2 <- ggplot(data=exam_data,
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(
    aes(data_id = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  coord_cartesian(xlim=c(0,100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(code = print(p1 + p2),
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       )
```

#### The code

```{r, eval=FALSE}
p1 <- ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  coord_cartesian(xlim=c(0,100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

p2 <- ggplot(data=exam_data,
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(
    aes(data_id = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  coord_cartesian(xlim=c(0,100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(code = print(p1 + p2),
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       )
```
:::

Notice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.

In order to build a coordinated multiple views as shown in the example above, the following programming strategy needs to be used:

1.  Appropriate interactive functions of **ggiraph** will be used to create the multiple views.

2.  *patchwork* function of [patchwork](https://patchwork.data-imaginist.com/) package will be used inside girafe function to create the interactive coordinated multiple views.

## Interactive Data Visualisation - plotly methods

Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library [plotly.js](https://plotly.com/javascript/) inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.

There are two ways to create interactive graph by using plotly, they are by using:

-   *plot_ly()*, and

-   *ggplotly()*

### Creating an interactive scatter plot: plot_ly() method

The tabset below shows an example a basic interactive plot created by using plot_ly().

::: {.panel-tabset}
#### The plot

```{r, echo=FALSE}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

#### The code

```{r, eval=FALSE}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

:::

### Working with visual variable: plot_ly() method

In the code chunk below, *color* argument is mapped to a qualitative visual variable (i.e. RACE). 
::: {.panel-tabset} 
#### The plot

```{r, echo=FALSE}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

#### The code

```{r, eval=FALSE}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

:::

### 

Creating an interactive scatter plot: ggplotly() method

The code chunk below plots a generic interactive scatter plot by using *ggplotly()*. It provides the coordinates of the plots as a default.

::: {.panel-tabset}
#### The plot

```{r, echo=FALSE}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

ggplotly(p)
```

#### The code

```{r, eval=FALSE}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

ggplotly(p)
```
:::

### Coordinated Multiple Views with plotly

The creation of a coordinated linked plot by using plotly involves three steps:

1.  [highlight_key()](https://www.rdocumentation.org/packages/plotly/versions/4.9.2/topics/highlight_key) of **plotly** package is used as shared data.

2.  two scatterplots will be created by using ggplot2 functions.

3.  [subplot()](https://plotly.com/r/subplots/) of **plotly** package is used to place them next to each other side-by-side.

::: {.panel-tabset}
#### The plot

```{r, echo=FALSE}
d <- highlight_key(exam_data) #sets up a key for interactive linking
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

#### The code

```{r, eval=FALSE}
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```
:::

## Interactive Data Visualisation - crosstalk methods

[Crosstalk](https://rstudio.github.io/crosstalk/index.html) is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

### Interactive Data Table: DT package

-   A wrapper of the JavaScript Library [DataTables](https://datatables.net/)
-   Data objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).

```{r}
DT::datatable(exam_data, class= "compact")
```

### Linked brushing: crosstalk method

The code chunk below is used to implement coordinated brushing.

-   *highlight()* is a function of **plotly** package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.

-   *bscols()* is a helper function of **crosstalk** package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. **Warning:** This will bring in all of Bootstrap!.

```{r}
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),       #interactive highlighting
                "plotly_selected") #plot will respond to selection events e.g. clicking, brushing, lasso selection

crosstalk::bscols(gg, 
                  DT::datatable(d), 
                  widths = 5)
```

## References

### ggiraph

This [link](https://davidgohel.github.io/ggiraph/index.html) provides online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the pdf version of the reference guide.

-   [How to Plot With Ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)

-   [Customizing interactive elements in ggiraph](https://www.ardata.fr/ggiraph-book/customize.html)

### plotly for R

-   [Getting Started with Plotly in R](https://plotly.com/r/getting-started/)

-   Carson Sievert (2020) [**Interactive web-based data visualization with R, plotly, and shiny**](https://plotly-r.com/)

-   [Getting Started with gganimate](https://gganimate.com/articles/gganimate.html)
