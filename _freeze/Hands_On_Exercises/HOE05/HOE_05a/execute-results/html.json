{
  "hash": "c68c1c5294a298cca3ba70e14c5032f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands on Exercise 05a: Visual Correlation Analysis\"\nauthor: \"Yee Jun Yit\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Overview\n\nThe correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\n\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\n\nThere are three broad reasons for computing the correlation matrix for a dataset:\n\n-   To reveal the relationship between high-dimensional variables in a pair-wise manner;\n-   To input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\n-   As a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, [Corrgram](https://www.datavis.ca/papers/corrgram.pdf) tends to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\n(1) Rendering the value of a correlation to depict its sign and magnitude, and\n(2) Reordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this exercise, we will learn how to perform data visualisations for correlation matrices. We will proceed in 3 sections:\n\n(1) Create correlation matrices using [pairs()](https://www.rdocumentation.org/packages/graphics/versions/3.6.0/topics/pairs) of R Graphics\n(2) Plot corrgrams using the **corrplot** package in R\n(3) Create an interactive correlation matrix using plotly R\n\n## Loading Data\n\nWe will be using the following R packages:\n\n- [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) package that provides a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables;\n- **ggstatsplot** package to create visual graphics with rich statistical information;\n- tidyverse, a family of R packages for data science processes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n\nWe will use the [Wine Quality Dataset](https://archive.ics.uci.edu/dataset/186/wine+quality) of UCI Machine Learning Repository, which consists of 13 variables and 6497 observations. The dataset already combines red wine and white wine data into one csv file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n\nWe note that besides quality, type, free sulfur dioxide, and  total sulfur dioxide columns, the rest of the features are continuous numerical data.\n\n## Building Correlation Matrix: *pairs()* method\n\nThere is more than one way to build scatterplot matrices with R. In this section, we will create a scatterplot matrix by using the [*pairs*](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html) function of R Graphics.\n\n### Building a basic correlation matrix\n\nThe figure below shows the scatter plot matrix of Wine Quality Data as an 12 by 12 matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:12])\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nThe input of *pairs()* can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple and uses the default *pairs* function. Columns 1 to 12 of wine dataframe are used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol, and quality.\n\nWe notice that quality column is the label, so we will use the features in columns 1 to 11 only.\n\n### Drawing only the lower triangle\n\n*pairs* function of R Graphics provids many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both because a correlation matrix is symmetric. To show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the lower.panel argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Including correlation coefficients\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, we can use the [*panel.cor*](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function. This will also show higher correlations in a larger font in the upper triangle of the matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,1:11], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Visualising Correlation Matrix: ggcormat()\n\nOne of the major limitations of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To overcome this problem, the **Corrgram** data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\n\nAt least three R packages provide functions to plot corrgrams, and they are:\n\n-  [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)\n-  [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)\n-  [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)\n\nOn top that, some R packages like ggstatsplot also provide functions for building corrgrams.\n\nIn this section, we will visualise a correlation matrix using [*ggcorrmat() *](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package\n\n### The basic plot\n\nOne of the advantages of using *ggcorrmat()* over other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nTheses consist of values which are not sorted, so we improve the plot by implementing hierarchical clustering to group similar features tugether, making patterns more visible.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n::: {callout-note}\n\n### Things to learn from the code chunk above\n\n-  `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.\n-  `hc.order` argument implements hierarchical clustering to the data\n-  `ggcorrplot.args` argument provides additional (mostly aesthetic) arguments that will be passed to the [`ggcorrplot::ggcorrplot`](https://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2?title=ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2) function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.\n:::\n\n\nThe following sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n\n## Building multiple plots\n\nSince ggstatsplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n::: {callout-note}\n\n### Things to learn from the code chunk above\n\n-  to build a facet plot, the only argument needed is `grouping.var`. Here, a robust correlation method which is percentage bend correlation is used, and the p-value us adjusted for multiple comparisons using Holm's method\n-  Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier.\n-  Similarly, `annotation.args` argument calls the [plot annotation arguments](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.\n:::\n\n## Visualising Correlation Matrix using corrplot Package\n\nWe now move to the main package to be explored in this exercise, which is the [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) package.\n\n### Getting started with corrplot\n\nWe recompute the correlation matrix of the wine data frame using this packaage and plot the corrgram using [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot), with setting all at default.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colours or **saturation** is used to represent the strength of the correlation coefficient. Darker colours and larger circles indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours and smaller circles indicates relatively weaker linear relationship.\n\n### Working with visual geometrics\n\nIn the **corrplot** package, there are seven visual geometrics (a parameter method) that can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle, but this default setting can be changed by using the method argument as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"pie\") \n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### Working with layouts\n\n*corrplot()* supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which displays the full matrix. The default setting can be changed by using the *type* argument of *corrplot()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nWe can further customise the layout by using the `diag` argument to turn off the diagonal cells, and the `tl.col` argument to change the axis text label colour to black as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         cl.cex = 0.8)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nOther arguments would include `tl.pos`, `tl.cex`, `tl.offset` for the text labels, and `cl.pos`, `cl.cex`, `cl.offset` for the colour legend\n\n## Working with mixed layouts\n\nWith the **corrplot** package, it is possible to design corrgrams which are mixed: a visual matrix in one triangle and a numerical matrix in the other triangle. In order to create a coorgram with such mixed layout, [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation styles will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"n\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nNotice that arguments *lower* and *upper* are used to define the visualisation method used. In this case ellipses are used to map the lower half of the corrgram and numbers are used to map the upper half of the corrgram. The argument `tl.pos` is used to specify the placement of the axis label. Lastly, the `diag` argument is used to specify the glyph on the principal diagonal of the corrgram, in this case none.\n\n### Combining corrgrams with the significant test\n\nIn statistical analysis, we are also interested to know which pair of variables have correlation coefficients which are statistically significant.\n\nWith the **corrplot** package, we can use the *cor.mtest()* function to compute the p-values and confidence interval for each pair of variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\n\nWe can then use the `p.mat` argument of `corrplot` function to feed the calculated p-values into the visual.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\nThe figure above shows the corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at a significance level of 0.05, but not the pair between total sulfur dioxide and citric acid.\n\n### Reordering a corrgram\n\nMatrix reordering is very important to mine the hiden structures and patterns in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-written by using the `order` argument of corrplot(). Currently, **corrplot** package supports four sorting methods:\n\n-  “AOE” is for the angular order of the eigenvectors. See [Michael Friendly (2002)](www.datavis.ca/papers/corrgram.pdf) for details.\n-  “FPC” for the first principal component order.\n-  \"hclust\" for hierarchical clustering order, and \"hclust.method\" for the agglomeration method to be used. \"hclust.method\" should be one of \"ward\", \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\" or \"centroid\".\n-  “alphabet” for alphabetical order.\n\nMore algorithms can be found in the [**seriation**](https://cran.r-project.org/web/packages/seriation/seriation.pdf) package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### Reordering a correlation matrix using hclust\n\nIf using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 5)\n```\n\n::: {.cell-output-display}\n![](HOE_05a_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## References\n\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. The American Statistician, 56, 316–324.\n\n### R Packages\n\n-  [ggcormat()](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package\n-  [**corrplot**](https://cran.r-project.org/web/packages/corrplot/index.html), a graphical display of a correlation matrices or general matrices. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\n-  [**corrgram**](https://cran.r-project.org/web/packages/corrgram/index.html), which calculates correlation of variables and displays the results graphically. Includes panel functions that can display points, shading, ellipses, and correlation values with confidence intervals.",
    "supporting": [
      "HOE_05a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}