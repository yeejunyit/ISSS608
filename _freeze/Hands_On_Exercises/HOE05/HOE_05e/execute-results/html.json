{
  "hash": "876b86a47e78ff0e2645bcccd962a87d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands on Exercise 05e: Treemap Visualisation with R\"\nauthor: \"Yee Jun Yit\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Overview\n\nIn this exercise, we will be designing treemaps using the appropriate R packages. There will be three sections to the exercise:\n\nFirst, we will manipulate transaction data into a treemap strcuture by using selected functions provided in the **dplyr** package. Second, we will plot static treemaps by using the **treemap** package. Third, we will design an interactive treemap by using the **d3treeR** package.\n\n## Loading Data\n\nWe will be using the following packages:\n\n-   [**treemap**](https://www.rdocumentation.org/packages/treemap/versions/2.4-4), for draw treemaps, a space-filling visualization of hierarchical structures.\n-   [**treemapify**](https://www.rdocumentation.org/packages/treemapify/versions/2.5.5) provides **ggplot2** geoms for drawing treemaps.;\n-   tidyverse, a family of R packages for data science processes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(treemap, treemapify, tidyverse)\n```\n:::\n\n\n\nWe will be using *REALIS2018.csv*, which provides information of private property transaction records in Singapore from 2018.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018 <- read_csv(\"data/realis2018.csv\")\n```\n:::\n\n\n\n## Data Wrangling\n\nThe tibble data.frame *realis2018* is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frame that is appropriate for treemap visualisation:\n\n-   group transaction records by *Project Name*, *Planning Region*, *Planning Area*, *Property Type* and *Type of Sale*, and\n-   compute *Total Unit Sold*, *Total Area*, *Median Unit Price* and *Median Transacted Price* by applying appropriate summary statistics on *No. of Units*, *Area (sqm)*, *Unit Price (\\$ psm)* and *Transacted Price (\\$)* respectively.\n\nTwo key verbs (functions) of **dplyr** package, namely: `group_by()` and `summarize()` will be used to perform these steps.\n\n`group_by()` breaks down a data.frame into specified groups of rows. When the verbs above are applied on the resulting object they’ll be automatically applied “by group”.\n\nGrouping affects the verbs as follows:\n\n-   grouped `select()` is the same as ungrouped `select()`, except that grouped variables are always retained.\n-   grouped `arrange()` is the same as ungrouped; unless you set `.by_group = TRUE`, in which case it orders first by the grouping variables.\n-   `mutate()` and `filter()` are most useful in conjunction with window functions (like `rank()`, or `min(x) == x`). They are described in detail in vignette(“window-functions”).\n-   `sample_n()` and `sample_frac()` sample the specified number/fraction of rows in each group.\n-   `summarise()` computes the summary for each group.\n\nThis [webpage](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html) provides some useful context on **dplyr** methods.\n\nIn our case, `group_by()` will used together with `summarise()` to derive the summarised data.frame.\n\n### Grouped summaries without the Pipe\n\nWe perform the steps above, and save the grouped and summarised data as different objects with the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_grouped <- group_by(realis2018, `Project Name`, `Planning Region`, `Planning Area`, `Property Type`, `Type of Sale`)\n\nrealis2018_summarised <- summarise(realis2018_grouped, `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), `Total Area` = sum(`Area (sqm)`, na.rm = TRUE), `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n```\n:::\n\n\n\n::: callout-note\n#### Note\n\nAggregation functions such as `sum()` and `meadian()` obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument `na.rm = TRUE` removes the missing values prior to computation.\n:::\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n### Grouped summaries with the *pipe*\n\nA more efficient way to tackle the same processes by using the pipe `%>%` is shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_summarised <- realis2018 %>% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %>%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n```\n:::\n\n\n\n## Designing Treemap with treemap Package\n\n**treemap** package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: `treemap()` offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n### Designing a static treemap\n\nIn this section, `treemap()` of **Treemap** package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017. We will use records belonging to \"resale condominium\" property type from *realis2018_selected* data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_selected <- realis2018_summarised %>%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n```\n:::\n\n\n\n### Using the basic arguments\n\nWe design a treemap by using three core arguments of `treemap()`, namely: `index`, `vSize` and `vColor`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n#### Things to learn from the arguments used\n\nIndex\n\n-   The index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\n-   If multiple column names are provided, as above, the first name forms the highest aggregation level, the second name forms the second highest aggregation level, and so on.\n\nvSize\n\n-   The column must not contain negative values. This is because its values will be used to map the sizes of the rectangles of the treemaps.\n:::\n\n::: callout-warning\n#### Warning\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\n\nFor `treemap()`, `vColor` is used in combination with the argument type to determines the colours of the rectangles. Without defining `type`, as is the case above, `treemap()` assumes `type = \"index\"`, which in our case is the hierarchy of planning areas.\n:::\n\n### Working with *vColor* and *type* arguments\n\nWe now define the `type` argument as `type = \"value\"`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n#### Things to learn from the code above\n\n-   The rectangles are coloured with different intensities of green, reflecting their respective median unit prices.\n-   The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n:::\n\n### Colours in treemap package\n\nThere are two arguments that determine the mapping to color palettes: `mapping` and `palette`. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n### The “value” type treemap\n\nThe following is a \"value\" type treemap with a different colour palette.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n#### Things to learn from the code above\n\n-   Although the colour palette used is `RdYlBu`, there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\n-   We see only 5000 to 45000 in the legend because the `range` argument is at its default `c(min(values, max(values))` with rounding.\n:::\n\n### The “manual” type treemap\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n#### Things to learn from the code above\n\nThe colour scheme used is very confusing. This is because `mapping = (min(values), mean(range(values)), max(values))`. It is not wise to use diverging colour palette such as \"RdYlBu\" if the values are all positive or negative\n:::\n\nThe confusion can be overcome by using a single colour palette such as \"Blues\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### Treemap Layout\n\n`treemap()` supports two popular treemap layouts, namely: \"squarified\" and \"pivotSize\". The default is \"pivotSize\".\n\nThe squarified treemap algorithm ([Bruls et al., 2000](https://vanwijk.win.tue.nl/stm.pdf)) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, with its \"pivot-by-size\" algorithm ([Bederson et al., 2002](https://www.cs.umd.edu/~ben/papers/Bederson2002Ordered.pdf)) takes the sorting order (sortID) into account, with acceptable aspect ratios.\n\n### Working with `algorithm` argument\n\nWe plot a \"squarified\" treemap by changing the `algorithm` argument\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### Using *sortID*\n\nWhen “pivotSize” `algorithm` is used, the *sortID* argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## Designing Treemap using treemapify Package\n\n**treemapify** is a R package specially developed to draw treemaps in **ggplot2**. In this section, we will design treemps to closely resemble treemaps in the previous section by using **treemapify**. The [Introduction to “treemapify”](https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html) and [user guide](https://cran.r-project.org/web/packages/treemapify/treemapify.pdf) are useful here.\n\n### Designing a basic treemap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-13-1.png){width=1152}\n:::\n:::\n\n\n\n### Defining hierarchy\n\nWe group by Planning Region.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nMake another group by Planning Area.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nAdd boundary lines i.e. borders\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nAdd text for clarity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\", size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\") +\n  geom_treemap_subgroup_text(place = \"centre\", grow = TRUE, alpha = 0.8, colour = \"white\", fontface = \"bold\") + \n  geom_treemap_subgroup2_text(place = \"centre\", grow = TRUE, alpha = 0.8, colour = \"white\", fontface = \"italic\")\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## Designing Interactive Treemap using d3treeR\n\n### Installing **d3treeR** package\n\nThis package is available in CRAN as **d3Tree**, but is not a stable working environment yet. We use the one available on github instead.\n\n1.  We first need to install ***devtools*** package. We skip this if our system already has the package installed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"devtools\")\n```\n:::\n\n\n\n2.  Then, we load the ***devtools*** library and install the **d3treeR** package from github by using the codes below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n```\n:::\n\n\n\n3.  We can now load the **d3treeR** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(d3treeR)\n```\n:::\n\n\n\n### Designing An Interactive Treemap\n\nThe codes below perform two processes:\n\n1.  `treemap()` is used to build a treemap by using selected variables in the condominium data.frame. The treemap created is save as object called tm.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm <- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](HOE_05e_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$tm\n     Planning Region    Planning Area vSize     vColor stdErr vColorValue level\n1     Central Region           Bishan   698   749211.5    698    749211.5     2\n2     Central Region      Bukit Merah   708   689448.0    708    689448.0     2\n3     Central Region      Bukit Timah  1171  2823552.5   1171   2823552.5     2\n4     Central Region    Downtown Core   439   570894.0    439    570894.0     2\n5     Central Region          Geylang  1489  2140814.5   1489   2140814.5     2\n6     Central Region          Kallang   757  1415268.0    757   1415268.0     2\n7     Central Region    Marine Parade   490  1397529.5    490   1397529.5     2\n8     Central Region           Museum    28   135893.0     28    135893.0     2\n9     Central Region             <NA> 10825 20978846.5  10825  20978846.5     1\n10    Central Region           Newton   268  1306816.0    268   1306816.0     2\n11    Central Region           Novena   732  2483944.5    732   2483944.5     2\n12    Central Region          Orchard    42   251834.5     42    251834.5     2\n13    Central Region           Outram    23   130671.0     23    130671.0     2\n14    Central Region       Queenstown  1432   953979.5   1432    953979.5     2\n15    Central Region     River Valley   587  1998014.0    587   1998014.0     2\n16    Central Region           Rochor   132   520971.0    132    520971.0     2\n17    Central Region  Singapore River   107   378001.0    107    378001.0     2\n18    Central Region Southern Islands    49   173903.0     49    173903.0     2\n19    Central Region          Tanglin   415  2187332.0    415   2187332.0     2\n20    Central Region        Toa Payoh  1258   670769.0   1258    670769.0     2\n21       East Region            Bedok  1810  3529868.5   1810   3529868.5     2\n22       East Region           Changi     5    20564.0      5     20564.0     2\n23       East Region             <NA>  3775  4616987.5   3775   4616987.5     1\n24       East Region        Pasir Ris   950   669171.0    950    669171.0     2\n25       East Region         Tampines  1010   397384.0   1010    397384.0     2\n26 North East Region       Ang Mo Kio   316   640722.5    316    640722.5     2\n27 North East Region          Hougang  1875  1617014.5   1875   1617014.5     2\n28 North East Region             <NA>  4835  4208661.0   4835   4208661.0     1\n29 North East Region          Punggol   313   126110.0    313    126110.0     2\n30 North East Region         Sengkang  1244   348343.5   1244    348343.5     2\n31 North East Region        Serangoon  1087  1476470.5   1087   1476470.5     2\n32      North Region           Mandai    29    62025.0     29     62025.0     2\n33      North Region             <NA>  1117   866745.0   1117    866745.0     1\n34      North Region        Sembawang   286   244075.0    286    244075.0     2\n35      North Region     Sungei Kadut     5    24359.0      5     24359.0     2\n36      North Region        Woodlands   271   164195.0    271    164195.0     2\n37      North Region           Yishun   436   313496.0    436    313496.0     2\n38      North Region           YISHUN    90    58595.0     90     58595.0     2\n39       West Region      Bukit Batok   583   618812.5    583    618812.5     2\n40       West Region    Bukit Panjang   285   374543.5    285    374543.5     2\n41       West Region    Choa Chu Kang   268   125114.0    268    125114.0     2\n42       West Region         Clementi  1167   531398.5   1167    531398.5     2\n43       West Region      Jurong East    71    65122.0     71     65122.0     2\n44       West Region      Jurong West   279   204900.0    279    204900.0     2\n45       West Region             <NA>  2653  1919890.5   2653   1919890.5     1\n          x0         y0           w           h   color\n1  0.3275971 0.39738809 0.138897168 0.216561105 #D9EF8B\n2  0.1867100 0.39738809 0.140887099 0.216561105 #DCF090\n3  0.0000000 0.34367306 0.186710023 0.270276129 #219B51\n4  0.3035037 0.17159339 0.083785567 0.225794695 #E0F295\n5  0.0000000 0.61394919 0.166214405 0.386050808 #66BD63\n6  0.0000000 0.16895143 0.186710023 0.174721631 #A6D96A\n7  0.1867100 0.00000000 0.116793665 0.180798665 #ABDB6D\n8  0.4321286 0.02884175 0.034365659 0.035111694 #FBFDB9\n9  0.0000000 0.00000000 0.466494290 1.000000000 #006837\n10 0.3035037 0.00000000 0.067305826 0.171593392 #B0DD70\n11 0.0000000 0.00000000 0.186710023 0.168951432 #40AA59\n12 0.4038275 0.00000000 0.028301131 0.063953443 #F3FAAF\n13 0.4321286 0.00000000 0.034365659 0.028841749 #FBFDB9\n14 0.1662144 0.61394919 0.159851597 0.386050808 #C9E881\n15 0.1867100 0.18079867 0.116793665 0.216589422 #72C264\n16 0.3708095 0.06395344 0.052846822 0.107639949 #E4F39A\n17 0.4236563 0.06395344 0.042837954 0.107639949 #ECF7A4\n18 0.3708095 0.00000000 0.033017986 0.063953443 #F7FBB4\n19 0.3872893 0.17159339 0.079205035 0.225794695 #66BD63\n20 0.3260660 0.61394919 0.140428288 0.386050808 #DCF090\n21 0.7660878 0.66653971 0.233912202 0.333460292 #006837\n22 0.8863175 0.30452342 0.113682520 0.001895373 #FFFFBF\n23 0.7660878 0.30452342 0.233912202 0.695476575 #006837\n24 0.8863175 0.30641880 0.113682520 0.360120910 #DCF090\n25 0.7660878 0.30452342 0.120229681 0.362016283 #ECF7A4\n26 0.6562718 0.42735132 0.109816035 0.124005158 #DCF090\n27 0.4664943 0.55135648 0.180101901 0.448643524 #99D368\n28 0.4664943 0.30452342 0.299593508 0.695476575 #006837\n29 0.6562718 0.30452342 0.109816035 0.122827894 #FBFDB9\n30 0.6465962 0.55135648 0.119491608 0.448643524 #EFF8AA\n31 0.4664943 0.30452342 0.189777473 0.246833051 #A6D96A\n32 0.9503779 0.00000000 0.042324766 0.029527172 #FFFFBF\n33 0.8419295 0.00000000 0.158070525 0.304523425 #CEEA84\n34 0.9373848 0.10768733 0.062615194 0.196836090 #F3FAAF\n35 0.9927026 0.00000000 0.007297373 0.029527172 #FFFFBF\n36 0.8419295 0.00000000 0.108448385 0.107687335 #F7FBB4\n37 0.8419295 0.10768733 0.095455331 0.196836090 #EFF8AA\n38 0.9503779 0.02952717 0.049622139 0.078160162 #FFFFBF\n39 0.6316405 0.09998753 0.122833675 0.204535895 #E0F295\n40 0.6316405 0.00000000 0.122833675 0.099987530 #ECF7A4\n41 0.7544742 0.03498570 0.087455313 0.132058702 #FBFDB9\n42 0.4664943 0.00000000 0.165146197 0.304523425 #E4F39A\n43 0.7544742 0.00000000 0.087455313 0.034985701 #FFFFBF\n44 0.7544742 0.16704440 0.087455313 0.137479022 #F7FBB4\n45 0.4664943 0.00000000 0.375435185 0.304523425 #79C565\n\n$type\n[1] \"value\"\n\n$vSize\n[1] \"Total Unit Sold\"\n\n$vColor\n[1] \"Median Unit Price ($ psm)\"\n\n$stdErr\n[1] \"Total Unit Sold\"\n\n$algorithm\n[1] \"pivotSize\"\n\n$vpCoorX\n[1] 0.02812148 0.97187852\n\n$vpCoorY\n[1] 0.171685 0.910315\n\n$aspRatio\n[1] 1.788798\n\n$range\n[1]       0 3500000\n\n$mapping\n[1] NA NA NA\n\n$draw\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nThen, `d3tree()` is used to build an interactive treemap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3tree(tm, rootname = \"Singapore\" )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"d3tree html-widget html-fill-item\" id=\"htmlwidget-16429efbde3b87877859\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-16429efbde3b87877859\">{\"x\":{\"data\":{\"name\":\"Singapore\",\"id\":1,\"size\":null,\"children\":[{\"name\":\"Central Region\",\"color\":\"#006837\",\"h\":1,\"id\":2,\"size\":10825,\"stdErr\":10825,\"vColor\":20978846.5,\"vColorValue\":20978846.5,\"vSize\":10825,\"w\":0.4664942900237018,\"x0\":0,\"y0\":0,\"children\":[{\"name\":\"Bishan\",\"color\":\"#D9EF8B\",\"h\":0.2165611047442029,\"id\":3,\"size\":698,\"stdErr\":698,\"vColor\":749211.5,\"vColorValue\":749211.5,\"vSize\":698,\"w\":0.1388971682283426,\"x0\":0.3275971217953593,\"y0\":0.3973880869417094},{\"name\":\"Bukit Merah\",\"color\":\"#DCF090\",\"h\":0.2165611047442029,\"id\":4,\"size\":708,\"stdErr\":708,\"vColor\":689448,\"vColorValue\":689448,\"vSize\":708,\"w\":0.1408870990052529,\"x0\":0.1867100227901064,\"y0\":0.3973880869417094},{\"name\":\"Bukit Timah\",\"color\":\"#219B51\",\"h\":0.2702761291218809,\"id\":5,\"size\":1171,\"stdErr\":1171,\"vColor\":2823552.5,\"vColorValue\":2823552.5,\"vSize\":1171,\"w\":0.1867100227901064,\"x0\":0,\"y0\":0.3436730625640314},{\"name\":\"Downtown Core\",\"color\":\"#E0F295\",\"h\":0.225794694775928,\"id\":6,\"size\":439,\"stdErr\":439,\"vColor\":570894,\"vColorValue\":570894,\"vSize\":439,\"w\":0.08378556716830476,\"x0\":0.3035036878329677,\"y0\":0.1715933921657813},{\"name\":\"Geylang\",\"color\":\"#66BD63\",\"h\":0.3860508083140878,\"id\":7,\"size\":1489,\"stdErr\":1489,\"vColor\":2140814.5,\"vColorValue\":2140814.5,\"vSize\":1489,\"w\":0.1662144048445302,\"x0\":0,\"y0\":0.6139491916859122},{\"name\":\"Kallang\",\"color\":\"#A6D96A\",\"h\":0.1747216308670059,\"id\":8,\"size\":757,\"stdErr\":757,\"vColor\":1415268,\"vColorValue\":1415268,\"vSize\":757,\"w\":0.1867100227901064,\"x0\":0,\"y0\":0.1689514316970255},{\"name\":\"Marine Parade\",\"color\":\"#ABDB6D\",\"h\":0.1807986653680943,\"id\":9,\"size\":490,\"stdErr\":490,\"vColor\":1397529.5,\"vColorValue\":1397529.5,\"vSize\":490,\"w\":0.1167936650428614,\"x0\":0.1867100227901064,\"y0\":0},{\"name\":\"Museum\",\"color\":\"#FBFDB9\",\"h\":0.0351116940585223,\"id\":10,\"size\":28,\"stdErr\":28,\"vColor\":135893,\"vColorValue\":135893,\"vSize\":28,\"w\":0.03436565888114059,\"x0\":0.4321286311425612,\"y0\":0.02884174869092903},{\"name\":\"Newton\",\"color\":\"#B0DD70\",\"h\":0.1715933921657813,\"id\":11,\"size\":268,\"stdErr\":268,\"vColor\":1306816,\"vColorValue\":1306816,\"vSize\":268,\"w\":0.06730582648246029,\"x0\":0.3035036878329677,\"y0\":0},{\"name\":\"Novena\",\"color\":\"#40AA59\",\"h\":0.1689514316970255,\"id\":12,\"size\":732,\"stdErr\":732,\"vColor\":2483944.5,\"vColorValue\":2483944.5,\"vSize\":732,\"w\":0.1867100227901064,\"x0\":0,\"y0\":0},{\"name\":\"Orchard\",\"color\":\"#F3FAAF\",\"h\":0.06395344274945129,\"id\":13,\"size\":42,\"stdErr\":42,\"vColor\":251834.5,\"vColorValue\":251834.5,\"vSize\":42,\"w\":0.02830113084329224,\"x0\":0.403827500299269,\"y0\":0},{\"name\":\"Outram\",\"color\":\"#FBFDB9\",\"h\":0.02884174869092899,\"id\":14,\"size\":23,\"stdErr\":23,\"vColor\":130671,\"vColorValue\":130671,\"vSize\":23,\"w\":0.03436565888114063,\"x0\":0.4321286311425612,\"y0\":0},{\"name\":\"Queenstown\",\"color\":\"#C9E881\",\"h\":0.3860508083140878,\"id\":15,\"size\":1432,\"stdErr\":1432,\"vColor\":953979.5,\"vColorValue\":953979.5,\"vSize\":1432,\"w\":0.1598515968686147,\"x0\":0.1662144048445302,\"y0\":0.6139491916859122},{\"name\":\"River Valley\",\"color\":\"#72C264\",\"h\":0.216589421573615,\"id\":16,\"size\":587,\"stdErr\":587,\"vColor\":1998014,\"vColorValue\":1998014,\"vSize\":587,\"w\":0.1167936650428614,\"x0\":0.1867100227901064,\"y0\":0.1807986653680943},{\"name\":\"Rochor\",\"color\":\"#E4F39A\",\"h\":0.1076399494163301,\"id\":17,\"size\":132,\"stdErr\":132,\"vColor\":520971,\"vColorValue\":520971,\"vSize\":132,\"w\":0.05284682173009263,\"x0\":0.3708095143154281,\"y0\":0.06395344274945132},{\"name\":\"Singapore River\",\"color\":\"#ECF7A4\",\"h\":0.10763994941633,\"id\":18,\"size\":107,\"stdErr\":107,\"vColor\":378001,\"vColorValue\":378001,\"vSize\":107,\"w\":0.04283795397818115,\"x0\":0.4236563360455207,\"y0\":0.06395344274945133},{\"name\":\"Southern Islands\",\"color\":\"#F7FBB4\",\"h\":0.06395344274945129,\"id\":19,\"size\":49,\"stdErr\":49,\"vColor\":173903,\"vColorValue\":173903,\"vSize\":49,\"w\":0.03301798598384095,\"x0\":0.3708095143154281,\"y0\":0},{\"name\":\"Tanglin\",\"color\":\"#66BD63\",\"h\":0.225794694775928,\"id\":20,\"size\":415,\"stdErr\":415,\"vColor\":2187332,\"vColorValue\":2187332,\"vSize\":415,\"w\":0.07920503502242932,\"x0\":0.3872892550012725,\"y0\":0.1715933921657814},{\"name\":\"Toa Payoh\",\"color\":\"#DCF090\",\"h\":0.3860508083140878,\"id\":21,\"size\":1258,\"stdErr\":1258,\"vColor\":670769,\"vColorValue\":670769,\"vSize\":1258,\"w\":0.1404282883105568,\"x0\":0.326066001713145,\"y0\":0.6139491916859122}]},{\"name\":\"East Region\",\"color\":\"#006837\",\"h\":0.6954765751211631,\"id\":22,\"size\":3775,\"stdErr\":3775,\"vColor\":4616987.5,\"vColorValue\":4616987.5,\"vSize\":3775,\"w\":0.2339122015285163,\"x0\":0.7660877984714837,\"y0\":0.3045234248788369,\"children\":[{\"name\":\"Bedok\",\"color\":\"#006837\",\"h\":0.3334602916474981,\"id\":23,\"size\":1810,\"stdErr\":1810,\"vColor\":3529868.5,\"vColorValue\":3529868.5,\"vSize\":1810,\"w\":0.2339122015285163,\"x0\":0.7660877984714837,\"y0\":0.666539708352502},{\"name\":\"Changi\",\"color\":\"#FFFFBF\",\"h\":0.001895373211904017,\"id\":24,\"size\":5,\"stdErr\":5,\"vColor\":20564,\"vColorValue\":20564,\"vSize\":5,\"w\":0.113682520335742,\"x0\":0.886317479664258,\"y0\":0.3045234248788369},{\"name\":\"Pasir Ris\",\"color\":\"#DCF090\",\"h\":0.360120910261761,\"id\":25,\"size\":950,\"stdErr\":950,\"vColor\":669171,\"vColorValue\":669171,\"vSize\":950,\"w\":0.113682520335742,\"x0\":0.886317479664258,\"y0\":0.306418798090741},{\"name\":\"Tampines\",\"color\":\"#ECF7A4\",\"h\":0.362016283473665,\"id\":26,\"size\":1010,\"stdErr\":1010,\"vColor\":397384,\"vColorValue\":397384,\"vSize\":1010,\"w\":0.1202296811927743,\"x0\":0.7660877984714837,\"y0\":0.304523424878837}]},{\"name\":\"North East Region\",\"color\":\"#006837\",\"h\":0.6954765751211631,\"id\":27,\"size\":4835,\"stdErr\":4835,\"vColor\":4208661,\"vColorValue\":4208661,\"vSize\":4835,\"w\":0.2995935084477819,\"x0\":0.4664942900237018,\"y0\":0.3045234248788369,\"children\":[{\"name\":\"Ang Mo Kio\",\"color\":\"#DCF090\",\"h\":0.1240051577145652,\"id\":28,\"size\":316,\"stdErr\":316,\"vColor\":640722.5,\"vColorValue\":640722.5,\"vSize\":316,\"w\":0.1098160354391928,\"x0\":0.656271763032291,\"y0\":0.427351318437884},{\"name\":\"Hougang\",\"color\":\"#99D368\",\"h\":0.4486435238475507,\"id\":29,\"size\":1875,\"stdErr\":1875,\"vColor\":1617014.5,\"vColorValue\":1617014.5,\"vSize\":1875,\"w\":0.1801019007180478,\"x0\":0.4664942900237018,\"y0\":0.5513564761524492},{\"name\":\"Punggol\",\"color\":\"#FBFDB9\",\"h\":0.1228278935590471,\"id\":30,\"size\":313,\"stdErr\":313,\"vColor\":126110,\"vColorValue\":126110,\"vSize\":313,\"w\":0.1098160354391928,\"x0\":0.656271763032291,\"y0\":0.3045234248788369},{\"name\":\"Sengkang\",\"color\":\"#EFF8AA\",\"h\":0.4486435238475507,\"id\":31,\"size\":1244,\"stdErr\":1244,\"vColor\":348343.5,\"vColorValue\":348343.5,\"vSize\":1244,\"w\":0.1194916077297341,\"x0\":0.6465961907417496,\"y0\":0.5513564761524492},{\"name\":\"Serangoon\",\"color\":\"#A6D96A\",\"h\":0.2468330512736124,\"id\":32,\"size\":1087,\"stdErr\":1087,\"vColor\":1476470.5,\"vColorValue\":1476470.5,\"vSize\":1087,\"w\":0.1897774730085891,\"x0\":0.4664942900237018,\"y0\":0.3045234248788368}]},{\"name\":\"North Region\",\"color\":\"#CEEA84\",\"h\":0.3045234248788368,\"id\":33,\"size\":1117,\"stdErr\":1117,\"vColor\":866745,\"vColorValue\":866745,\"vSize\":1117,\"w\":0.1580705246799801,\"x0\":0.8419294753200199,\"y0\":0,\"children\":[{\"name\":\"Mandai\",\"color\":\"#FFFFBF\",\"h\":0.02952717240970038,\"id\":34,\"size\":29,\"stdErr\":29,\"vColor\":62025,\"vColorValue\":62025,\"vSize\":29,\"w\":0.04232476595303115,\"x0\":0.9503778606067911,\"y0\":0},{\"name\":\"Sembawang\",\"color\":\"#F3FAAF\",\"h\":0.1968360902081649,\"id\":35,\"size\":286,\"stdErr\":286,\"vColor\":244075,\"vColorValue\":244075,\"vSize\":286,\"w\":0.06261519398680651,\"x0\":0.9373848060131935,\"y0\":0.1076873346706719},{\"name\":\"Sungei Kadut\",\"color\":\"#FFFFBF\",\"h\":0.02952717240970027,\"id\":36,\"size\":5,\"stdErr\":5,\"vColor\":24359,\"vColorValue\":24359,\"vSize\":5,\"w\":0.007297373440177785,\"x0\":0.9927026265598221,\"y0\":0},{\"name\":\"Woodlands\",\"color\":\"#F7FBB4\",\"h\":0.1076873346706719,\"id\":37,\"size\":271,\"stdErr\":271,\"vColor\":164195,\"vColorValue\":164195,\"vSize\":271,\"w\":0.1084483852867712,\"x0\":0.8419294753200199,\"y0\":0},{\"name\":\"Yishun\",\"color\":\"#EFF8AA\",\"h\":0.1968360902081649,\"id\":38,\"size\":436,\"stdErr\":436,\"vColor\":313496,\"vColorValue\":313496,\"vSize\":436,\"w\":0.09545533069317358,\"x0\":0.8419294753200199,\"y0\":0.1076873346706719},{\"name\":\"YISHUN\",\"color\":\"#FFFFBF\",\"h\":0.07816016226097153,\"id\":39,\"size\":90,\"stdErr\":90,\"vColor\":58595,\"vColorValue\":58595,\"vSize\":90,\"w\":0.04962213939320893,\"x0\":0.9503778606067911,\"y0\":0.02952717240970034}]},{\"name\":\"West Region\",\"color\":\"#79C565\",\"h\":0.3045234248788369,\"id\":40,\"size\":2653,\"stdErr\":2653,\"vColor\":1919890.5,\"vColorValue\":1919890.5,\"vSize\":2653,\"w\":0.3754351852963181,\"x0\":0.4664942900237018,\"y0\":0,\"children\":[{\"name\":\"Bukit Batok\",\"color\":\"#E0F295\",\"h\":0.2045358948206935,\"id\":41,\"size\":583,\"stdErr\":583,\"vColor\":618812.5,\"vColorValue\":618812.5,\"vSize\":583,\"w\":0.1228336754003785,\"x0\":0.6316404872497866,\"y0\":0.09998753005814345},{\"name\":\"Bukit Panjang\",\"color\":\"#ECF7A4\",\"h\":0.09998753005814345,\"id\":42,\"size\":285,\"stdErr\":285,\"vColor\":374543.5,\"vColorValue\":374543.5,\"vSize\":285,\"w\":0.1228336754003785,\"x0\":0.6316404872497866,\"y0\":0},{\"name\":\"Choa Chu Kang\",\"color\":\"#FBFDB9\",\"h\":0.1320587020510166,\"id\":43,\"size\":268,\"stdErr\":268,\"vColor\":125114,\"vColorValue\":125114,\"vSize\":268,\"w\":0.08745531266985472,\"x0\":0.7544741626501652,\"y0\":0.03498570091650066},{\"name\":\"Clementi\",\"color\":\"#E4F39A\",\"h\":0.3045234248788369,\"id\":44,\"size\":1167,\"stdErr\":1167,\"vColor\":531398.5,\"vColorValue\":531398.5,\"vSize\":1167,\"w\":0.1651461972260849,\"x0\":0.4664942900237018,\"y0\":0},{\"name\":\"Jurong East\",\"color\":\"#FFFFBF\",\"h\":0.03498570091650072,\"id\":45,\"size\":71,\"stdErr\":71,\"vColor\":65122,\"vColorValue\":65122,\"vSize\":71,\"w\":0.08745531266985475,\"x0\":0.7544741626501652,\"y0\":0},{\"name\":\"Jurong West\",\"color\":\"#F7FBB4\",\"h\":0.1374790219113196,\"id\":46,\"size\":279,\"stdErr\":279,\"vColor\":204900,\"vColorValue\":204900,\"vSize\":279,\"w\":0.08745531266985472,\"x0\":0.7544741626501652,\"y0\":0.1670444029675173}]}]},\"meta\":{\"type\":\"value\",\"vSize\":\"Total Unit Sold\",\"vColor\":\"Median Unit Price ($ psm)\",\"stdErr\":\"Total Unit Sold\",\"algorithm\":\"pivotSize\",\"vpCoorX\":[0.02812148481439815,0.9718785151856019],\"vpCoorY\":[0.1716850393700787,0.9103149606299213],\"aspRatio\":1.788798157900348,\"range\":[0,3500000],\"mapping\":[null,null,null],\"draw\":true},\"options\":{\"id\":\"id\",\"celltext\":\"name\",\"valueField\":\"size\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n",
    "supporting": [
      "HOE_05e_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/d3-3.5.5/d3.min.js\"></script>\n<link href=\"../../site_libs/d3tree-0.1/d3tree.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/d3tree-binding-0.1/d3tree.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}