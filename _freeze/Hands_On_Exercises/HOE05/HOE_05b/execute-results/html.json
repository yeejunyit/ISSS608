{
  "hash": "68214899008fd2030e95247012637c71",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands on Exercise 05b: Creating Ternary Plots with R\"\nauthor: \"Yee Jun Yit\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Overview\nTernary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\n\nIn this exercise, we will build ternary plots programmatically using R for visualising and analysing the population structure of Singapore.\n\nWe will follow 4 steps for this exercise:\n(1) Install and launch **tidyverse** and **ggtern** packages\n(2) Derive three new measures using `mutate()` function of **dplyr** package\n(3) Build a static ternary plot using `ggtern()` function of **ggtern** package\n(4) Build an interactive ternary plot using *plot-ly()* function of **Plotly R** package.\n\n## Loading Data\n\nWe will use two main R packages for this hands-on exercise. They are:\n-  [ggtern](https://cran.r-project.org/web/packages/ggtern/ggtern.pdf), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\n-  [Plotly R](https://plotly.com/r/), an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The **plotly R** libary contains the *ggplotly* function, which will convert **ggplot2** figures into a Plotly object.\n-  tidyverse, a family of R packages for data science processes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggtern, plotly, tidyverse)\n```\n:::\n\n\n\nWe will be using the [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n```\n:::\n\n\nWe will use the ***mutate()*** function of **dplyr** package to derive three new measures, namely: young, active, and old by unpacking the columns based on year, grouped by their ages using `pivot_wider()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  pivot_wider(names_from = AG, values_from = Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n```\n:::\n\n\n\n## Plotting Ternary Diagram with R\n\n### Plotting a static ternary diagram\n\nWe use **ggtern()** function of **ggtern** package to create a simple ternary plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](HOE_05b_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWe add a theme for better clarity of visualisation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2018\") +\n  theme_rgbw()\n```\n\n::: {.cell-output-display}\n![](HOE_05b_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Plotting an interative ternary diagram\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reusable function for creating annotation object\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Active\"), \n  baxis = axis(\"Young\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~ACTIVE, \n  b = ~YOUNG, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\",\n  mode = \"markers\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-a484e79ffff8ab8007f6\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-a484e79ffff8ab8007f6\">{\"x\":{\"visdat\":{\"231848d57b95\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"231848d57b95\",\"attrs\":{\"231848d57b95\":{\"a\":{},\"b\":{},\"c\":{},\"mode\":\"markers\",\"color\":[\"black\"],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatterternary\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"annotations\":[{\"text\":\"Ternary Markers\",\"x\":0.10000000000000001,\"y\":1,\"ax\":0,\"ay\":0,\"xref\":\"paper\",\"yref\":\"paper\",\"align\":\"center\",\"font\":{\"family\":\"serif\",\"size\":15,\"color\":\"white\"},\"bgcolor\":\"#b3b3b3\",\"bordercolor\":\"black\",\"borderwidth\":2},{\"text\":\"Ternary Markers\",\"x\":0.10000000000000001,\"y\":1,\"ax\":0,\"ay\":0,\"xref\":\"paper\",\"yref\":\"paper\",\"align\":\"center\",\"font\":{\"family\":\"serif\",\"size\":15,\"color\":\"white\"},\"bgcolor\":\"#b3b3b3\",\"bordercolor\":\"black\",\"borderwidth\":2},{\"text\":\"Ternary Markers\",\"x\":0.10000000000000001,\"y\":1,\"ax\":0,\"ay\":0,\"xref\":\"paper\",\"yref\":\"paper\",\"align\":\"center\",\"font\":{\"family\":\"serif\",\"size\":15,\"color\":\"white\"},\"bgcolor\":\"#b3b3b3\",\"bordercolor\":\"black\",\"borderwidth\":2}],\"ternary\":{\"aaxis\":{\"title\":\"Active\",\"tickformat\":\".0%\",\"tickfont\":{\"size\":10}},\"baxis\":{\"title\":\"Young\",\"tickformat\":\".0%\",\"tickfont\":{\"size\":10}},\"caxis\":{\"title\":\"Old\",\"tickformat\":\".0%\",\"tickfont\":{\"size\":10}}},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"a\":[2740,16170,14840,12690,3430,9150,4300,12110,2230,14060,4510,45710,15180,25810,19310,21220,21070,3410,15900,16870,15980,2820,15290,7750,8760,8950,5820,7670,10800,15490,7360,940,8370,590,3840,4670,6060,5050,2080,7120,10100,6680,5520,7440,8930,12770,3910,16400,17950,2180,15430,12430,11840,3480,3620,5190,6090,3610,3100,5860,360,890,12210,17860,18250,19220,13670,24570,7630,16480,9160,8730,3420,3240,3600,480,190,480,420,23090,17450,7000,15440,2600,14570,26090,17440,14210,17940,7660,25460,260,490,10630,8740,14290,11080,17470,31010,40200,22280,5180,38680,20830,6800,4690,6670,460,6070,5540,6790,40,1190,5460,15100,5880,190,120,2260,730,580,170,960,18530,2030,1580,5860,380,250,110,270,820,6500,3750,190,8520,1180,0,17640,30070,4690,20340,30600,130,29530,11360,30070,4070,6270,7210,6990,480,9050,8640,110,490,2610,1830,50,190,90,6580,2220,1820,1130,870,160,740,1670,100,1850,100,930,150,1120,1050,160,8530,18460,4710,16010,3560,980,26910,13650,33700,35630,36610,4640,7270,14050,19820,9060,8910,100,110,1900,1210,370,22950,75820,45320,990,4170,5620,790,2100,7030,5370,4580,4540,3950,5970,6430,2880,16540,7760,1400,430,19770,7000,19250,56330,24180,17020,5970,8850,550,16630,2150,790,34340,23160,32480],\"b\":[1360,6680,6290,5540,2150,4030,2520,5040,1330,6650,1880,21770,7490,12740,9300,11400,10250,1590,7910,9410,8030,2010,7760,3570,4940,4430,2850,3770,6110,7930,3660,390,3310,280,1580,1890,2660,2090,700,3050,4350,2870,2020,2920,4000,6840,2190,9300,10050,1210,8680,6390,6670,1850,1750,2600,3190,1820,1670,3030,130,550,7200,12200,12340,11100,8080,13530,3390,6910,3900,4090,1800,1570,1840,160,30,160,120,9710,8200,3700,7460,1460,7660,13050,8680,7730,8670,4090,13300,140,200,5320,4700,6650,5690,9250,15620,19860,12320,2470,23050,8500,2910,1730,2810,220,2530,2360,2820,10,690,2450,6710,2880,30,20,930,320,270,30,370,8070,1130,770,2360,210,100,0,120,250,2380,1390,50,4530,680,0,10280,19890,2230,12820,14400,80,14730,5210,14570,1630,3010,3340,2810,220,3830,4160,140,140,1260,940,30,70,10,2520,900,720,480,340,40,250,640,0,780,20,290,60,530,350,70,4390,9580,3380,8030,1950,570,13590,5950,15970,19070,19280,2700,4290,6620,10050,5250,4630,0,20,630,490,190,12290,41600,25010,570,1530,2570,390,970,3450,2640,2080,2050,1800,2580,2540,1490,7440,3270,780,230,13380,3840,12250,33820,13910,9690,3000,5760,240,8850,1390,380,17860,12380,15540],\"c\":[730,5480,5960,4780,1200,3360,1300,4800,640,4270,850,15150,3190,9530,5460,5850,7230,1560,4920,3990,5520,260,3600,1990,1340,2100,1430,1660,2110,3400,3240,100,3510,250,970,1840,2780,2350,410,1960,3510,3120,2260,2450,2740,3320,620,2800,3930,430,2220,1890,3590,1070,880,1320,1390,1060,860,1880,110,50,2100,2830,2180,3370,3510,3350,2830,6130,2780,2930,670,1240,750,220,0,30,70,7240,5530,1600,5170,710,2830,7180,4180,3810,5880,2470,5540,10,220,3350,1800,4550,3170,3500,8240,5650,4050,740,7140,6700,2530,2560,2500,160,2150,1830,1460,10,250,1490,5720,1590,20,10,540,130,150,30,280,5760,750,480,1000,140,100,0,70,450,2070,2200,50,1600,300,170,2650,6040,340,3060,2950,40,4160,910,2870,1760,2040,3020,3410,140,2150,3040,0,20,540,510,20,50,0,2700,390,300,320,260,0,300,520,40,830,0,120,40,530,540,0,1260,2500,400,2170,720,180,3250,1590,4160,5990,5410,1210,2360,4480,7430,1970,2700,20,10,200,100,150,5150,17670,9660,180,800,1240,250,580,3120,2010,1310,1710,1810,2260,2350,1040,4900,3260,260,70,2830,2050,3080,6910,3080,4090,1570,700,150,3560,690,210,4740,5330,7770],\"mode\":\"markers\",\"type\":\"scatterternary\",\"marker\":{\"color\":\"rgba(0,0,0,1)\",\"line\":{\"color\":\"rgba(0,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,0,0,1)\"},\"line\":{\"color\":\"rgba(0,0,0,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n",
    "supporting": [
      "HOE_05b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}