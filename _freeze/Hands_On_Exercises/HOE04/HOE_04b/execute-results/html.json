{
  "hash": "1563a5056088b820daaeca54231a9d03",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands on Exercise 04b: Visual Statistical Analysis\"\nauthor: \"Yee Jun Yit\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Overview\n\nIn this hands-on exercise, we will gain experience on using:\n\n-   **ggstatsplot** package to create visual graphics with rich statistical information,\n\n-   **performance** package to visualise model diagnostics, and\n\n-   **parameters** package to visualise model parameters\n\n[ggstatplot](https://indrajeetpatil.github.io/ggstatsplot/index.html) ![](images/image1.png){width=\"35\" height=\"40\"} is an extension of the ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves in order to:\n\n-   provide alternative statistical inference methods by default;\n\n-   follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n![](images/image2.jpg)\n\n## Loading data\n\nWe will use **ggstatsplot** and **tidyverse** packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n\n\nWe will be using *Exam_data.csv*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n## One-sample test: gghistostats() method\n\nWe build a visual of one-sample test on English scores using [gghistostats()](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nDefault information from left to right: - (logarithm of) Bayes Factor: Indicates the strength of evidence in favor of the alternative hypothesis (that the mean of ENGLISH is different from 60) versus the null hypothesis - posterior probability: he probability that the alternative hypothesis is true given the data sample sizes - Mean & Credible Interval: The posterior estimate of the mean and its uncertainty range - scale parameter (r) of the JZS (Jeffreys-Zellner-Siow) Cauchy prior\n\n### Understanding the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories. That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\n\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as ![](images/image5.jpg)\n\nThe [Schwarz criterion](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n### Interpreting the Bayes Factor\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagenmakers](https://www-tandfonline-com.libproxy.smu.edu.sg/doi/pdf/10.1080/00031305.1999.10474443?needAccess=true) in 2013:\n\n![](images/image6.jpg) \\## Two-sample mean test: ggbetweenstats()\n\nWe build a visual for two-sample non-parametric test of Maths scores by gender using [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nDefault information from left to right: - Mann-Whitney test statistic (W) - p-value - Rank-Biserial Correlation (r): quantifies how much one group tends to have higher values than the other - Confidence Interval for r - Number of observations\n\n### Oneway ANOVA Test: ggbetweenstats() method\n\nIn the code chunk below, `ggbetweenstats()` is used to build a visual for One-way ANOVA test on English score by race.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\npairwise.display parameters: - \"ns\" --\\> only non-significant - \"s\" --\\> only significant - \"all\" --\\> everything\n\n#### ggbetweenstats - Summary of tests\n\n![](images/image7.jpg)\n\n![![](images/image9.jpg)](images/image8.jpg)\n\n### Significant Test of Correlation: ggscatterstats()\n\nHere we build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Significant Test of Association (Depedence) : ggbarstats() methods\n\nWe first bin the Maths scores into a 4-class variable by using [cut()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n```\n:::\n\n\n\nIn this code chunk below [ggbarstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Visualising Models\nIn this section, we will visualise model diagnostic and model parameters by using the **parameters** package.\n\nWe will use the Toyota Corolla case study to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n### Loading data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, performance, parameters, see)\n```\n:::\n\n\nWe will ingest the ToyotaCorolla.xls workbook and convert it into a tibble dataframe using R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n### Multiple Regression Model using lm()\n\nThe code chunk below is used to calibrate a multiple linear regression model by using *lm()* of Base Stats of R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n```\n\n\n:::\n:::\n\n\n\n### Model Diagnostic: checking for multicolinearity\nWe check for multicollinearity in the features of the model using [*check_collinearity()* ](https://easystats.github.io/performance/reference/check_collinearity.html) of the [**performance**](https://easystats.github.io/performance/index.html) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_collinearity(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_c <- check_collinearity(model)\nplot(check_c)\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### Model Diagnostic: checking normality assumption\n\nWe check for normality in the data using [*check_normality()* ](https://easystats.github.io/performance/reference/check_normality.html) of the [**performance**](https://easystats.github.io/performance/index.html) package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_n <- check_normality(model1)\nplot(check_n)\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### Model Diagnostic: Check model for homogeneity of variances\n\nWe use [*check_heteroscedasticity()*](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of the [**performance**](https://easystats.github.io/performance/index.html) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n### Model Diagnostic: Complete check\n\nWe can perform a complete check by using [*check_model()*](https://easystats.github.io/performance/reference/check_model.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(model1)\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### Visualising Regression Parameters: see methods\n\nWe use plot() of **see** package and parameters() of **parameters** package to visualise the weights of a regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(parameters(model1))\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### Visualising Regression Parameters: ggcoefstats() methods\n\nWe use [ggcoefstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoefstats(model1, \n            output = \"plot\")\n```\n\n::: {.cell-output-display}\n![](HOE_04b_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "HOE_04b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}