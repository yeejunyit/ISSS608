[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.\nTake a look at this mathematical function."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#introduction",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#introduction",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Introduction",
    "text": "Introduction\nIn this document, we explore the creation of interactive data visuals using the following packages:\n\nggiraph: a R package that makes ggplot graphics interactive.\nplotly: a R package that plots interactive statistical graphs.\nDT: an interface to the JavaScript library DataTables that creates interactive tables on the html page.\ntidyverse: a family of packages that support data science, analysis and communication tasks with the creation of static statistical graphs.\npatchwork: for compositing figures created using ggplot."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#loading-data",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#loading-data",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Loading Data",
    "text": "Loading Data\nInstall and load packages and libraries\n\npacman::p_load(ggiraph, plotly, \n               DT, tidyverse, patchwork)\n\nRead data file\n\nexam_data = read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visuals-ggiraph-methods",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visuals-ggiraph-methods",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactive Data Visuals: ggiraph methods",
    "text": "Interactive Data Visuals: ggiraph methods\nggiraph is a htmlwidget and a ggplot2 extension which allows ggplot graphics to be interactive. This is done using ggplot interactive geometries via the following 3 aesthetics:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nData_id: a column of data-sets that contain an id to be associated with elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\n\n\nTooltip effect with tooltip aesthetic\nWe will plot an interactive statistical graph by using the ggiraph package by first creating a ggplot object, then the girafe() function of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nAgain, we emphasize the two-step process: first, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will build the basic visual and required settings, and secondly girafe() is called as the engine that generates the svg object to be displayed on a html page."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactivity",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactivity",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactivity",
    "text": "Interactivity\nBy hovering our cursor over a data point, we see the student’s ID as specified in aes(tooltip = ID)\n\n\n\n\n\n\n\nDisplaying multiple pieces of information in tooltip\nThe content of the tooltip can be customised by including a list object as below\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nObserve the first three lines of code create a new column called tooltip in the data which is a concatenation of names from existing columns. This newly created field is then used as the tooltip argument which will show up in the interactive plot."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactivity-1",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactivity-1",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactivity",
    "text": "Interactivity\nBy hovering our cursor over a data point, we see the student’s ID and Class.\n\n\n\n\n\n\n\nCustomising tooltip style\nWe can use opts_tooltip() of ggiraph to customize tooltip rendering by adding css declarations.\n\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\"\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(                                \n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(\n      css = tooltip_css))\n)                                   \n\n\n\n\n\n\n\n\n\nCustomising tooltip style\nWe can use opts_tooltip() of ggiraph to customize tooltip rendering by adding css declarations.\n\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\"\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(                                \n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(\n      css = tooltip_css))\n)                                   \n\nNotice now that the tooltip has a white background and black bolded text.\n\n\n\n\n\n\nWe will use these customizations as a reference to learn more.\n\n\nDisplaying statistics on tooltip\nThe code below is an advanved implementation of tooltip customization. Here, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)       #format y (mean) with specified accuracy\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS,             #calculates the statistics\n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n               fun.data = \"mean_se\",      #mean and standard error of mean\n               geom = GeomInteractiveCol, #interactive bar\n               fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\nHere a function is used to compute a 90% confidence interval of the mean, and the statistics are then displayed on the tooltip.\n\n\n\n\n\n\n\n\nHover Effect with data_id aesthetic\nThe code chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618    \n)\n\nIn this aesthetic, elements associated with the same data_id, which is the CLASS in this case, will be highlighted when a specific data point is moused over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\nChanging data_id style\nWe make some style changes using CSS by encoding it directly in the girafe() engine options\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\") #for non-highlighted data_id\n    ) \n)                                       \n\n\n\n\n\n\n\n\nCombining tooltip and hover effects\nThere are times when we would want to combine the above two aesthetics we’ve seen so far\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n    )\n)\n\nBy combining tooltip and data_id arguments in geom_dotplot_interactive(), elements associated with the same data_id (CLASS) will be highlighted upon mouse over, and at the same time the tooltip will show the CLASS\n\n\n\n\n\n\n\n\nClick effect with onclick\nThe onclick aesthetic of ggiraph provides hotlink interactivity on the web.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",          #sprintf is R string formatter, window.open is JavaScript, %s placeholders \n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618)\n\nThe click action must be in the data point for the link to be triggered. Generally clicking in the plot where there is no data point will not trigger the onclick.\n\n\n\n\n\n\n\n\nCoordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\nThe plotsThe code\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy needs to be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactive Data Visualisation - plotly methods",
    "text": "Interactive Data Visualisation - plotly methods\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are by using:\n\nplot_ly(), and\nggplotly()\n\n\nCreating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\nWorking with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE). ::: {.panel-tabset} #### The plot\n\n\n\n\n\n\n\nThe code\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n:::\n\n\n\n\nCreating an interactive scatter plot: ggplotly() method\nThe code chunk below plots a generic interactive scatter plot by using ggplotly(). It provides the coordinates of the plots as a default.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\nCoordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nsubplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactive Data Visualisation - crosstalk methods",
    "text": "Interactive Data Visualisation - crosstalk methods\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\nInteractive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\nLinked brushing: crosstalk method\nThe code chunk below is used to implement coordinated brushing.\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),       #interactive highlighting\n                \"plotly_selected\") #plot will respond to selection events e.g. clicking, brushing, lasso selection\n\ncrosstalk::bscols(gg, \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#references",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#references",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "References",
    "text": "References\n\nggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nCustomizing interactive elements in ggiraph\n\n\n\nplotly for R\n\nGetting Started with Plotly in R\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny\nGetting Started with gganimate"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "",
    "text": "In this document, we will explore ggplot2 for creating elegant and functional statistical graphics"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#introduction",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#introduction",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "",
    "text": "In this document, we will explore ggplot2 for creating elegant and functional statistical graphics"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#loading-data",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#loading-data",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Loading Data",
    "text": "Loading Data\nLoad tidyverse\n\npacman::p_load(tidyverse)\n\nRead data file\n\nexam_data = read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#first-glance-comparing-graphics",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#first-glance-comparing-graphics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "First Glance: Comparing Graphics",
    "text": "First Glance: Comparing Graphics\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\nHere the code is simple\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nHere, there are more paramters to customise, but the mapping between variables and the properties of interest are more visible here"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#grammar-of-graphics",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#grammar-of-graphics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nBefore we dive in, We need to understand that there is a scheme for data visualization which breaks up graphs into components such as scales and layers.\nThese consist of:\n\nData: The dataset being plotted.\nAesthetics, which take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets, which split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, which are statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems, which define the plane on which data are mapped on the graphic.\nThemes, which modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-1-data",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-1-data",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 1: Data",
    "text": "Essential Grammatical Element 1: Data\nWe call ggplot2 using\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nThis initialises a ggplot object and displays a blank canvas"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-2-aesthetics",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-2-aesthetics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 2: Aesthetics",
    "text": "Essential Grammatical Element 2: Aesthetics\nAesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call, as below\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\nThis draws the x-axis together with the label."
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-2-geometrics",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-2-geometrics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 2: Geometrics",
    "text": "Essential Grammatical Element 2: Geometrics\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_bar for drawing bar charts\ngeom_dotplot for counting occurrences of a variable\ngeom_histogram for drawing a histogram\ngeom_density for drawing kernel density estimates\ngeom_boxplot for drawing vertical boxplots\ngeom_violin for drawing violin plots\ngeom_point for drawing a scatter plot\ngeom_line for drawing line charts\ngeom_smooth for drawing simple trends with smoothed lines\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map (The data to be used in these maps are passed using the map_data() function)\n\n\nGeometric Objects: geom_bar()\nPlot bar charts\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=GENDER)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_dotplot()\nIn a dot plot, dots are stacked, with each dot representing one observation. By default, ggplot2 sets the bin width to 1/30th of the range of the data. This default value may not always produce an optimal histogram, so it would be better to specify the binning\nThe code below plots a dot plot\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot(binwidth = 5,\n               dotsize = 0.3)\n\n\n\n\n\n\n\n\nObserve the scale of the y-axis is very misleading, and in fact has gone out of range for 5 of our bins, so we use the scale_y_continuous() method to turn off the y-axis including it’s break marks, and adjust the dotsize for visibility\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_histogram()\nA simple histogram is created using the ENGLISH field from exam_data\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects Modification Using arguments\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20. Note that binwidth argument overrides this\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\nGeometric Objects Modification using aes()\n\nThe code chunk below fills the histogram with colour by using a sub-group of aesthetic()\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nGeometric Objects: geom_density() This computes and plots a kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_density() \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour argument of aes()\n\nggplot(data=exam_data, \n       aes(x = ENGLISH, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_boxplot()\nThis displays a vertiacal continuous value diagram. It visualises five summary statistics (the median, two quartiles, and two extreme values), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\n\n\n\nInstead of rectangular boxes, we can use notches to help visually assess whether the medians of distributions differ. This is useful when the medians are close together, to determine whether the medians are equal.\nA notched plot is identical to a box_plot, except the existence of a notch argument\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_violin()\nThis creates a violin plot, which is a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nWe plot the distribution of English scores by gender in a violin plot.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_point()\nThis creates a scatterplot.\nWe plot the scatter showing the Maths and English grades of students.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y= ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\ngeom objects can be combined\nWe plot the scatter on the boxplot using the code chunk below\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\nThe order of the plots matter. In this case, the scatter plot has been overlaid on the boxplot as the boxplot code comes first."
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat_()\nThe boxplots below are incomplete because the positions of the means are not displayed.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)\n\n\n\n\n\n\n\n\n\n\nWorking with stat - the geom_() method\nThe code chunk below adds mean values by using the geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\nAdding a best fit curve on a scatterplot\nWe return to the scatterplot previously showing the relationship of Maths and English grades of students\n\n\n\n\n\n\n\n\n\nThe interpretability of this graph can be improved by adding a best fit curve.\nWe use geom_smooth() to fit a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=1)\n\n\n\n\n\n\n\n\nThe default smoothing method uses Locally Estimated Scatterplot Smoothing (LOESS), but can be overridden to a linear best fit curve as below\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=1)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: facets",
    "text": "Essential Grammatical Elements in ggplot2: facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap().\n\nWorking with facet_wrap()\nfacet_wrap() wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet_wrap() which divides the plot into multiple panels based on the values of the variable &lt;span style= background-color: #D3D3D3;“&gt;CLASS.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nWorking with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\nWorking with Coordinates\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the y and x-axis range\nThe previous scatterplot with best fit line is slightly misleading because the y-axis and x-axis ranges are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=1)\n\n\n\n\n\n\n\n\nThe code chunk below fixes both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: Themes",
    "text": "Essential Grammatical Elements in ggplot2: Themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of themes can be found at this link. Each theme element can be conceived of as either a line (e.g.x-axis), a rectangle (e.g.graph background), or text (e.g.axis title). ### Working with themes The code chunk below plots a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nThe below plots the same using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nAnd another example using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#references",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#references",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "References",
    "text": "References\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This webpage contains the deliverables of my course in ISSS608 Visual Analytics and Applications at SMU."
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html",
    "href": "Hands_On_Exercises/HOE00/HOE00.html",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "Load tidyverse into r env by using code chunk below freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#getting-started",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#getting-started",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "Load tidyverse into r env by using code chunk below freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#importing-data-new-way",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#importing-data-new-way",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Importing data (New way)",
    "text": "Importing data (New way)\nUses readr to import csv as a tibble data.frame\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#pivoting-data",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#pivoting-data",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Pivoting data",
    "text": "Pivoting data\n%&gt;% sequentially processes functions, called “pipe”\n\npopdata_long = popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#writing-and-reading-the-file",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#writing-and-reading-the-file",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Writing and reading the file",
    "text": "Writing and reading the file\nrds is a r data serialisation *Remember to add rds folder to .gitignore as it is a data folder\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")\n\n\npopdata_long = read_rds(\"rds/popdata_long.rds\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#working-with-dplyr-package",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#working-with-dplyr-package",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Working with dplyr package",
    "text": "Working with dplyr package\n\nselect() function\n\nrealis2019_selected = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 4\n   `Project Name`           `Type of Sale` `Unit Price ($ psm)` `Property Type` \n   &lt;chr&gt;                    &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;           \n 1 PEIRCE VIEW              Resale                         7434 Condominium     \n 2 FLORIDA PARK             Resale                         9737 Semi-Detached H…\n 3 BULLION PARK             Resale                        11467 Condominium     \n 4 CASTLE GREEN             Resale                         9346 Condominium     \n 5 HAPPY ESTATE             Resale                        10183 Semi-Detached H…\n 6 TEACHER'S HOUSING ESTATE Resale                        12659 Terrace House   \n 7 THE PANORAMA             Resale                        16064 Condominium     \n 8 THE PANORAMA             Resale                        16905 Condominium     \n 9 CHIP THYE GARDEN         Resale                        13500 Terrace House   \n10 TEACHER'S HOUSING ESTATE Resale                         9935 Terrace House   \n# ℹ 19,505 more rows\n\n\n\n\nfilter() function\n\nrealis2019_filtered = realis2019_selected %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\n\ncombining both functions\n\nrealis2019_combined = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`) %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\nrealis2019_filtered\n\n# A tibble: 87 × 4\n   `Project Name`        `Type of Sale` `Unit Price ($ psm)` `Property Type`\n   &lt;chr&gt;                 &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;          \n 1 RIVERFRONT RESIDENCES New Sale                      12863 Apartment      \n 2 RIVERFRONT RESIDENCES New Sale                      12809 Apartment      \n 3 RIVERFRONT RESIDENCES New Sale                      12848 Apartment      \n 4 RIVERFRONT RESIDENCES New Sale                      12875 Apartment      \n 5 RIVERFRONT RESIDENCES New Sale                      12962 Apartment      \n 6 RIVERFRONT RESIDENCES New Sale                      12915 Apartment      \n 7 RIVERFRONT RESIDENCES New Sale                      12513 Apartment      \n 8 RIVERFRONT RESIDENCES New Sale                      12838 Apartment      \n 9 RIVERFRONT RESIDENCES New Sale                      12970 Apartment      \n10 RIVERFRONT RESIDENCES New Sale                      13000 Apartment      \n# ℹ 77 more rows"
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this document, we explore several ggplot2 extensions for creating elegant and effective statistical graphics.\nBesides tidyverse, we will use 4 additional R packages:\n\nggrepel: an R package that provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package that provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package that provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for compositing figures created using ggplot2."
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#introduction",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#introduction",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this document, we explore several ggplot2 extensions for creating elegant and effective statistical graphics.\nBesides tidyverse, we will use 4 additional R packages:\n\nggrepel: an R package that provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package that provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package that provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for compositing figures created using ggplot2."
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#loading-data",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#loading-data",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Loading Data",
    "text": "Loading Data\nInstall and load packages and libraries\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\nRead data file\n\nexam_data = read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Beyond ggplot2 Annotation: ggrepel",
    "text": "Beyond ggplot2 Annotation: ggrepel\nggrepel is an extension of ggplot2 which provides geoms for ggplot2 to repel overlapping text. This has to do with annotations on a large number of data points in a statistical graph.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nAs can be seen the ID labels are very messy and don’t provide visual information.\n\nUsing ggrepel\nWe fix this by replacing geom_label() with geom_label_repel(), and geom_text() with geom_text_repel()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nThis eliminates overlapping labels, improving the clarity of our visualizations."
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-ggplot2-themes",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-ggplot2-themes",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Beyond ggplot2 themes",
    "text": "Beyond ggplot2 themes\nggplot2 comes with eight built-in themes: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nAn example: theme_light() is shown below\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey90\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\nWorking with ggthemes\nggthemes provides themes with geoms and scales that replicate the look of visualisations by renowned publications e.g. theme_economist(), theme_excel(), theme_calc(), theme_igray(), theme_wsj(), theme_stata(), theme_solarized(), theme_fivethirtyeight() e.t.c.\nThe example below uses The Economist’s theme\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\nWorking with hrbthemes\nThis packages provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. With a few additional arguments, we can make quick emphasis during a production workflow environment.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\nIn the above, we used the axis_title_size argument to increase the font size of the axis title to 18, base_size argument to increase the default axis label font size to 15, andgrid argument to display only the y-axis grid lines."
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-a-single-graph",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-a-single-graph",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Beyond a Single Graph",
    "text": "Beyond a Single Graph\nMultiple graphs are normally required to tell a compelling visual story, and several ggplot2 extensions provide functions to compose figure with multiple graphs. Before we combine multiple graphs to create a composite plot, let us look at three individual graphs on their own.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme(plot.title = element_text(size=10))\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\") +\n  theme(plot.title = element_text(size=10))\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point(size=1) +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\") +\n  theme(plot.title = element_text(size=9))\n\n\n\n\n\nCreating Composite Graphics: patchwork methods\nSeveral ggplot2 extension packages support the compositing of graphs, such as gridExtra package’s grid.arrange() and cowplot package’s plot_grid(). Here, we shall work with the patchwork package, which is specially designed for combining separate ggplot2 graphs into a single figure.\npatchwork has a very simple syntax to create composite layouts easily. It uses a combination of:\n\nplus sign + to create a two-column layout\nparenthesis () to create a subplot group\ndivision sign / to create a two-row layout\n\n\n\nCombining two ggplot2 graphs\nThe two histograms we saw indiivudally earlier will be combined using the simple addition of a + sign, as below\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\nCombining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs on top of each other,\n“|” operator to place plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\nCreating composite pictures with tags\npatchwork also provides auto-tagging capabilities to identify subplots, as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\nCreating picture inlays\nBesides providing functions to place plots next to each other, patchwork allows us to place one or several plots elements freely on top or below another plot with the inset_element() function.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\nCreating a composite figure with theme\nWe now combine patchwork with ggthemes for appealing visuals.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() & theme(plot.title = element_text(size = 15))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#references",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#references",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "References",
    "text": "References\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics will tend to attract the interest of the audience and make a deeper impression than static graphics.\nIn this exercise, we will create animated data visualisations by using the gganimate and plotly r packages.At the same time, we will also learn how to (i) reshape data by using the tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nWe first introduce some of the key concepts and terminology related to this type of visualization\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore making animated graphs, one should ask oneself: Does it make sense to go through the effort? If you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#overview",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#overview",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics will tend to attract the interest of the audience and make a deeper impression than static graphics.\nIn this exercise, we will create animated data visualisations by using the gganimate and plotly r packages.At the same time, we will also learn how to (i) reshape data by using the tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nWe first introduce some of the key concepts and terminology related to this type of visualization\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore making animated graphs, one should ask oneself: Does it make sense to go through the effort? If you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#loading-data",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#loading-data",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, a ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(plotly, gganimate, gifski, gapminder, tidyverse, readxl)\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nIn the above, mutate_at() of dplyr package is used to convert all character data types into factors. A factor is a data type in R used to represent categorical variables. These store data as integer values with corresponding ‘levels’, making them memory-efficient.\nInstead of the above using mutate_at(), we can use across to achieve the same output with the basic mutate()\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "Animated Data Visualisation: gganimate Methods",
    "text": "Animated Data Visualisation: gganimate Methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nBuilding a static population bubble plot\nWe first create a static bubble plot for reference\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\nBuilding the animated bubble plot\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#animated-data-visualisation-plotly",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#animated-data-visualisation-plotly",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "Animated Data Visualisation: plotly",
    "text": "Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\nBuilding an animated bubble plot: ggplotly() method\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\nBuilding an animated bubble plot: plot_ly() method\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 12),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#references",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#references",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "References",
    "text": "References\n\nGetting Started\nBuilding an animation step-by-step with gganimate"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "",
    "text": "We have explored some of the popular statistical graphics methods for visualising distribution e.g. histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2 in Hands On Exercise 1.\nIn this document, we are going to explore two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#overview",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#overview",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "",
    "text": "We have explored some of the popular statistical graphics methods for visualising distribution e.g. histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2 in Hands On Exercise 1.\nIn this document, we are going to explore two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#loading-data",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#loading-data",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following packages: - ggridges: a ggplot2 extension specially designed for plotting ridgeline plots - ggdist: a ggplot2 extension specially designed for visualising distribution and uncertainty - colorspace: an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations. - ggthemes: a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package - tidyverse: a family of R packages to meet the modern data science and visual communication needs\n\npacman::p_load(ggridges, ggdist, colorspace, ggthemes, tidyverse)\n\nWe will be using Exam_data.csv\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "Visualising Distribution with Ridgeline Plot",
    "text": "Visualising Distribution with Ridgeline Plot\nRidgeline plot (also known as Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nThe figure below is a ridgelines plot showing the distribution of English scores by class.\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\nPlotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plots with R.\nIn this section, we will plot ridgeline plots by using the ggridges package. It provides two main geoms to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe following is plotted by using geom_density_ridges().\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nVarying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient().\nBoth geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nMapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nImportant\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\nRidgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "Visualising Distribution with Raincloud Plot",
    "text": "Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does\nIn this section, we create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\nPlotting a Half Eye graph\nFirst we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which contains a half-density and a slab-interval.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA\n\n\n\n\nAdding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\nAdding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\nFinishing Touches\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#references",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#references",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "References",
    "text": "References\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\nggstatplot  is an extension of the ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves in order to:\n\nprovide alternative statistical inference methods by default;\nfollow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html#overview",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html#overview",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\nggstatplot  is an extension of the ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves in order to:\n\nprovide alternative statistical inference methods by default;\nfollow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html#loading-data",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html#loading-data",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "Loading data",
    "text": "Loading data\nWe will use ggstatsplot and tidyverse packages\n\npacman::p_load(ggstatsplot, tidyverse)\n\nWe will be using Exam_data.csv\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html#one-sample-test-gghistostats-method",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html#one-sample-test-gghistostats-method",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "One-sample test: gghistostats() method",
    "text": "One-sample test: gghistostats() method\nWe build a visual of one-sample test on English scores using gghistostats()\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information from left to right: - (logarithm of) Bayes Factor: Indicates the strength of evidence in favor of the alternative hypothesis (that the mean of ENGLISH is different from 60) versus the null hypothesis - posterior probability: he probability that the alternative hypothesis is true given the data sample sizes - Mean & Credible Interval: The posterior estimate of the mean and its uncertainty range - scale parameter (r) of the JZS (Jeffreys-Zellner-Siow) Cauchy prior\n\nUnderstanding the Bayes Factor\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories. That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as \nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\nInterpreting the Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n ## Two-sample mean test: ggbetweenstats()\nWe build a visual for two-sample non-parametric test of Maths scores by gender using ggbetweenstats()\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information from left to right: - Mann-Whitney test statistic (W) - p-value - Rank-Biserial Correlation (r): quantifies how much one group tends to have higher values than the other - Confidence Interval for r - Number of observations\n\n\nOneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\npairwise.display parameters: - “ns” –&gt; only non-significant - “s” –&gt; only significant - “all” –&gt; everything\n\nggbetweenstats - Summary of tests\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Correlation: ggscatterstats()\nHere we build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Association (Depedence) : ggbarstats() methods\nWe first bin the Maths scores into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html#visualising-models",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html#visualising-models",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "Visualising Models",
    "text": "Visualising Models\nIn this section, we will visualise model diagnostic and model parameters by using the parameters package.\nWe will use the Toyota Corolla case study to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\nLoading data\n\npacman::p_load(readxl, performance, parameters, see)\n\nWe will ingest the ToyotaCorolla.xls workbook and convert it into a tibble dataframe using R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\nMultiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nModel Diagnostic: checking for multicolinearity\nWe check for multicollinearity in the features of the model using check_collinearity() of the performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\nWe check for normality in the data using check_normality() of the performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\nWe use check_heteroscedasticity() of the performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Complete check\nWe can perform a complete check by using check_model()\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: see methods\nWe use plot() of see package and parameters() of parameters package to visualise the weights of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: ggcoefstats() methods\nWe use ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  }
]