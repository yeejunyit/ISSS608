[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.\nTake a look at this mathematical function."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This webpage contains the deliverables of my course in ISSS608 Visual Analytics and Applications at SMU."
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html",
    "href": "HandsOnE/HOE00/HOE00.html",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "Load tidyverse into r env by using code chunk below freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#load-tidyverse-into-r-env-by-using-code-chunk-below",
    "href": "HandsOnE/HOE00/HOE00.html#load-tidyverse-into-r-env-by-using-code-chunk-below",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#importing-data-new-way---uses-readr-to-import-as-a-tibble-data.frame",
    "href": "HandsOnE/HOE00/HOE00.html#importing-data-new-way---uses-readr-to-import-as-a-tibble-data.frame",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "realis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#pivoting-data-the-indented-function-is-processed-on-popdata_fat-called-pipe",
    "href": "HandsOnE/HOE00/HOE00.html#pivoting-data-the-indented-function-is-processed-on-popdata_fat-called-pipe",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "popdata_long = popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#writing-the-file-to-a-r-data-serialisation-remember-to-add-rds-folder-to-.gitignore-as-it-is-a-data-folder",
    "href": "HandsOnE/HOE00/HOE00.html#writing-the-file-to-a-r-data-serialisation-remember-to-add-rds-folder-to-.gitignore-as-it-is-a-data-folder",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "write_rds(popdata_long, \"rds/popdata_long.rds\")\n\n\npopdata_long = read_rds(\"rds/popdata_long.rds\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#working-with-dplyr",
    "href": "HandsOnE/HOE00/HOE00.html#working-with-dplyr",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Working with dplyr:",
    "text": "Working with dplyr:\n\nselect() function\n\nrealis2019_selected = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 4\n   `Project Name`           `Type of Sale` `Unit Price ($ psm)` `Property Type` \n   &lt;chr&gt;                    &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;           \n 1 PEIRCE VIEW              Resale                         7434 Condominium     \n 2 FLORIDA PARK             Resale                         9737 Semi-Detached H…\n 3 BULLION PARK             Resale                        11467 Condominium     \n 4 CASTLE GREEN             Resale                         9346 Condominium     \n 5 HAPPY ESTATE             Resale                        10183 Semi-Detached H…\n 6 TEACHER'S HOUSING ESTATE Resale                        12659 Terrace House   \n 7 THE PANORAMA             Resale                        16064 Condominium     \n 8 THE PANORAMA             Resale                        16905 Condominium     \n 9 CHIP THYE GARDEN         Resale                        13500 Terrace House   \n10 TEACHER'S HOUSING ESTATE Resale                         9935 Terrace House   \n# ℹ 19,505 more rows\n\n\n\n\nfilter() function\n\nrealis2019_filtered = realis2019_selected %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\n\ncombining both functions\n\nrealis2019_combined = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`) %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#getting-started-load-tidyverse-into-r-env-by-using-code-chunk-below",
    "href": "HandsOnE/HOE00/HOE00.html#getting-started-load-tidyverse-into-r-env-by-using-code-chunk-below",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#importing-data-new-way",
    "href": "HandsOnE/HOE00/HOE00.html#importing-data-new-way",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Importing data (New way)",
    "text": "Importing data (New way)\nUses readr to import csv as a tibble data.frame\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#pivoting-data",
    "href": "HandsOnE/HOE00/HOE00.html#pivoting-data",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Pivoting data",
    "text": "Pivoting data\n%&gt;% sequentially processes functions, called “pipe”\n\npopdata_long = popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#writing-and-reading-the-file-to-a-r-data-serialisation",
    "href": "HandsOnE/HOE00/HOE00.html#writing-and-reading-the-file-to-a-r-data-serialisation",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Writing and reading the file to a r data serialisation",
    "text": "Writing and reading the file to a r data serialisation\n*Remember to add rds folder to .gitignore as it is a data folder\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")\n\n\npopdata_long = read_rds(\"rds/popdata_long.rds\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#getting-started",
    "href": "HandsOnE/HOE00/HOE00.html#getting-started",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "Load tidyverse into r env by using code chunk below freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#writing-and-reading-the-file",
    "href": "HandsOnE/HOE00/HOE00.html#writing-and-reading-the-file",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Writing and reading the file",
    "text": "Writing and reading the file\nrds is a r data serialisation *Remember to add rds folder to .gitignore as it is a data folder\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")\n\n\npopdata_long = read_rds(\"rds/popdata_long.rds\")"
  },
  {
    "objectID": "HandsOnE/HOE00/HOE00.html#working-with-dplyr-package",
    "href": "HandsOnE/HOE00/HOE00.html#working-with-dplyr-package",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Working with dplyr package",
    "text": "Working with dplyr package\n\nselect() function\n\nrealis2019_selected = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 4\n   `Project Name`           `Type of Sale` `Unit Price ($ psm)` `Property Type` \n   &lt;chr&gt;                    &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;           \n 1 PEIRCE VIEW              Resale                         7434 Condominium     \n 2 FLORIDA PARK             Resale                         9737 Semi-Detached H…\n 3 BULLION PARK             Resale                        11467 Condominium     \n 4 CASTLE GREEN             Resale                         9346 Condominium     \n 5 HAPPY ESTATE             Resale                        10183 Semi-Detached H…\n 6 TEACHER'S HOUSING ESTATE Resale                        12659 Terrace House   \n 7 THE PANORAMA             Resale                        16064 Condominium     \n 8 THE PANORAMA             Resale                        16905 Condominium     \n 9 CHIP THYE GARDEN         Resale                        13500 Terrace House   \n10 TEACHER'S HOUSING ESTATE Resale                         9935 Terrace House   \n# ℹ 19,505 more rows\n\n\n\n\nfilter() function\n\nrealis2019_filtered = realis2019_selected %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\n\ncombining both functions\n\nrealis2019_combined = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`) %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\nrealis2019_filtered\n\n# A tibble: 87 × 4\n   `Project Name`        `Type of Sale` `Unit Price ($ psm)` `Property Type`\n   &lt;chr&gt;                 &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;          \n 1 RIVERFRONT RESIDENCES New Sale                      12863 Apartment      \n 2 RIVERFRONT RESIDENCES New Sale                      12809 Apartment      \n 3 RIVERFRONT RESIDENCES New Sale                      12848 Apartment      \n 4 RIVERFRONT RESIDENCES New Sale                      12875 Apartment      \n 5 RIVERFRONT RESIDENCES New Sale                      12962 Apartment      \n 6 RIVERFRONT RESIDENCES New Sale                      12915 Apartment      \n 7 RIVERFRONT RESIDENCES New Sale                      12513 Apartment      \n 8 RIVERFRONT RESIDENCES New Sale                      12838 Apartment      \n 9 RIVERFRONT RESIDENCES New Sale                      12970 Apartment      \n10 RIVERFRONT RESIDENCES New Sale                      13000 Apartment      \n# ℹ 77 more rows"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html",
    "href": "HOE/HOE01/HOE_01.html",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "",
    "text": "In this document, we will explore ggplot2 for creating elegant and functional statistical graphics"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#introduction-and-importing-data",
    "href": "HOE/HOE01/HOE_01.html#introduction-and-importing-data",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "",
    "text": "In this document, we will explore ggplot2 for creating elegant and functional statistical graphics\nLoad tidyverse\n\npacman::p_load(tidyverse)\n\nRead data file\n\nexam_data = read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#comparing-graphics",
    "href": "HOE/HOE01/HOE_01.html#comparing-graphics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Comparing Graphics",
    "text": "Comparing Graphics\n\nR Graphics\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\nHere the code is simple\n\n\nggplot2\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nHere, there are more paramters to customise , but the mapping between variables and the properties of interest are more visible here"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#grammar-of-graphics",
    "href": "HOE/HOE01/HOE_01.html#grammar-of-graphics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nBefore we dive in, We need to understand that there is a scheme for data visualization which breaks up graphs into components such as scales and layers.\nThese consist of:\n\nData: The dataset being plotted.\nAesthetics, which take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets, which split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, which are statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems, which define the plane on which data are mapped on the graphic.\nThemes, which modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#essential-grammatical-element-1-data",
    "href": "HOE/HOE01/HOE_01.html#essential-grammatical-element-1-data",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 1: Data",
    "text": "Essential Grammatical Element 1: Data\nWe call ggplot2 using\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nThis initialises a ggplot object and displays a blank canvas"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#essential-grammatical-element-2-aesthetics",
    "href": "HOE/HOE01/HOE_01.html#essential-grammatical-element-2-aesthetics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 2: Aesthetics",
    "text": "Essential Grammatical Element 2: Aesthetics\nAesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call, as below\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\nThis draws the x-axis together with the label."
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#essential-grammatical-element-2-geometrics",
    "href": "HOE/HOE01/HOE_01.html#essential-grammatical-element-2-geometrics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 2: Geometrics",
    "text": "Essential Grammatical Element 2: Geometrics\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_bar for drawing bar charts\ngeom_dotplot for counting occurrences of a variable\ngeom_histogram for drawing a histogram\ngeom_density for drawing kernel density estimates\ngeom_boxplot for drawing vertical boxplots\ngeom_violin for drawing violin plots\ngeom_point for drawing a scatter plot\ngeom_line for drawing line charts\ngeom_smooth for drawing simple trends with smoothed lines\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map (The data to be used in these maps are passed using the map_data() function)\n\n\nGeometric Objects: geom_bar()\nPlot bar charts\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=GENDER)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_dotplot()\nIn a dot plot, dots are stacked, with each dot representing one observation. By default, ggplot2 sets the bin width to 1/30th of the range of the data. This default value may not always produce an optimal histogram, so it would be better to specify the binning\nThe code below plots a dot plot\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot(binwidth = 5,\n               dotsize = 0.3)\n\n\n\n\n\n\n\n\nObserve the scale of the y-axis is very misleading, and in fact has gone out of range for 5 of our bins, so we use the scale_y_continuous() method to turn off the y-axis including it’s break marks, and adjust the dotsize for visibility\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_histogram()\nA simple histogram is created using the ENGLISH field from exam_data\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects Modification Using arguments\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20. Note that binwidth argument overrides this\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\nGeometric Objects Modification using aes()\n\nThe code chunk below fills the histogram with colour by using a sub-group of aesthetic()\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nGeometric Objects: geom_density() This computes and plots a kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_density() \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour argument of aes()\n\nggplot(data=exam_data, \n       aes(x = ENGLISH, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_boxplot()\nThis displays a vertiacal continuous value diagram. It visualises five summary statistics (the median, two quartiles, and two extreme values), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\n\n\n\nInstead of rectangular boxes, we can use notches to help visually assess whether the medians of distributions differ. This is useful when the medians are close together, to determine whether the medians are equal.\nA notched plot is identical to a box_plot, except the existence of a notch argument\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_violin()\nThis creates a violin plot, which is a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nWe plot the distribution of English scores by gender in a violin plot.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_point()\nThis creates a scatterplot.\nWe plot the scatter showing the Maths and English grades of students.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y= ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\ngeom objects can be combined\nWe plot the scatter on the boxplot using the code chunk below\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\nThe order of the plots matter. In this case, the scatter plot has been overlaid on the boxplot as the boxplot code comes first."
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "HOE/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat_()\nThe boxplots below are incomplete because the positions of the means are not displayed.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)\n\n\n\n\n\n\n\n\n\n\nWorking with stat - the geom_() method\nThe code chunk below adds mean values by using the geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\nAdding a best fit curve on a scatterplot\nWe return to the scatterplot previously showing the relationship of Maths and English grades of students\n\n\n\n\n\n\n\n\n\nThe interpretability of this graph can be improved by adding a best fit curve.\nWe use geom_smooth() to fit a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=1)\n\n\n\n\n\n\n\n\nThe default smoothing method uses Locally Estimated Scatterplot Smoothing (LOESS), but can be overridden to a linear best fit curve as below\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=1)"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "HOE/HOE01/HOE_01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Adding a best fit curve on a scatterplot",
    "text": "Adding a best fit curve on a scatterplot\nWe return to the scatterplot previously showing the relationship of Maths and English grades of students"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "HOE/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: facets",
    "text": "Essential Grammatical Elements in ggplot2: facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap().\n\nWorking with facet_wrap()\nfacet_wrap() wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet_wrap() which divides the plot into multiple panels based on the values of the variable &lt;span style= background-color: #D3D3D3;“&gt;CLASS.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nWorking with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "HOE/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\nWorking with Coordinates\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the y and x-axis range\nThe previous scatterplot with best fit line is slightly misleading because the y-axis and x-axis ranges are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=1)\n\n\n\n\n\n\n\n\nThe code chunk below fixes both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "HOE/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: Themes",
    "text": "Essential Grammatical Elements in ggplot2: Themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of themes can be found at this link. Each theme element can be conceived of as either a line (e.g.x-axis), a rectangle (e.g.graph background), or text (e.g.axis title). ### Working with themes The code chunk below plots a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nThe below plots the same using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nAnd another example using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#references",
    "href": "HOE/HOE01/HOE_01.html#references",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "References",
    "text": "References\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#introduction",
    "href": "HOE/HOE01/HOE_01.html#introduction",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "",
    "text": "In this document, we will explore ggplot2 for creating elegant and functional statistical graphics"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#loading-data",
    "href": "HOE/HOE01/HOE_01.html#loading-data",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Loading Data",
    "text": "Loading Data\nLoad tidyverse\n\npacman::p_load(tidyverse)\n\nRead data file\n\nexam_data = read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "HOE/HOE01/HOE_01.html#first-glance-comparing-graphics",
    "href": "HOE/HOE01/HOE_01.html#first-glance-comparing-graphics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "First Glance: Comparing Graphics",
    "text": "First Glance: Comparing Graphics\n\nR Graphics\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\nHere the code is simple\n\n\nggplot2\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nHere, there are more paramters to customise, but the mapping between variables and the properties of interest are more visible here"
  },
  {
    "objectID": "HOE/HOE00/HOE00.html",
    "href": "HOE/HOE00/HOE00.html",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "Load tidyverse into r env by using code chunk below freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "HOE/HOE00/HOE00.html#getting-started",
    "href": "HOE/HOE00/HOE00.html#getting-started",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "Load tidyverse into r env by using code chunk below freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "HOE/HOE00/HOE00.html#importing-data-new-way",
    "href": "HOE/HOE00/HOE00.html#importing-data-new-way",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Importing data (New way)",
    "text": "Importing data (New way)\nUses readr to import csv as a tibble data.frame\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "HOE/HOE00/HOE00.html#pivoting-data",
    "href": "HOE/HOE00/HOE00.html#pivoting-data",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Pivoting data",
    "text": "Pivoting data\n%&gt;% sequentially processes functions, called “pipe”\n\npopdata_long = popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")"
  },
  {
    "objectID": "HOE/HOE00/HOE00.html#writing-and-reading-the-file",
    "href": "HOE/HOE00/HOE00.html#writing-and-reading-the-file",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Writing and reading the file",
    "text": "Writing and reading the file\nrds is a r data serialisation *Remember to add rds folder to .gitignore as it is a data folder\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")\n\n\npopdata_long = read_rds(\"rds/popdata_long.rds\")"
  },
  {
    "objectID": "HOE/HOE00/HOE00.html#working-with-dplyr-package",
    "href": "HOE/HOE00/HOE00.html#working-with-dplyr-package",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Working with dplyr package",
    "text": "Working with dplyr package\n\nselect() function\n\nrealis2019_selected = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 4\n   `Project Name`           `Type of Sale` `Unit Price ($ psm)` `Property Type` \n   &lt;chr&gt;                    &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;           \n 1 PEIRCE VIEW              Resale                         7434 Condominium     \n 2 FLORIDA PARK             Resale                         9737 Semi-Detached H…\n 3 BULLION PARK             Resale                        11467 Condominium     \n 4 CASTLE GREEN             Resale                         9346 Condominium     \n 5 HAPPY ESTATE             Resale                        10183 Semi-Detached H…\n 6 TEACHER'S HOUSING ESTATE Resale                        12659 Terrace House   \n 7 THE PANORAMA             Resale                        16064 Condominium     \n 8 THE PANORAMA             Resale                        16905 Condominium     \n 9 CHIP THYE GARDEN         Resale                        13500 Terrace House   \n10 TEACHER'S HOUSING ESTATE Resale                         9935 Terrace House   \n# ℹ 19,505 more rows\n\n\n\n\nfilter() function\n\nrealis2019_filtered = realis2019_selected %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\n\ncombining both functions\n\nrealis2019_combined = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`) %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\nrealis2019_filtered\n\n# A tibble: 87 × 4\n   `Project Name`        `Type of Sale` `Unit Price ($ psm)` `Property Type`\n   &lt;chr&gt;                 &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;          \n 1 RIVERFRONT RESIDENCES New Sale                      12863 Apartment      \n 2 RIVERFRONT RESIDENCES New Sale                      12809 Apartment      \n 3 RIVERFRONT RESIDENCES New Sale                      12848 Apartment      \n 4 RIVERFRONT RESIDENCES New Sale                      12875 Apartment      \n 5 RIVERFRONT RESIDENCES New Sale                      12962 Apartment      \n 6 RIVERFRONT RESIDENCES New Sale                      12915 Apartment      \n 7 RIVERFRONT RESIDENCES New Sale                      12513 Apartment      \n 8 RIVERFRONT RESIDENCES New Sale                      12838 Apartment      \n 9 RIVERFRONT RESIDENCES New Sale                      12970 Apartment      \n10 RIVERFRONT RESIDENCES New Sale                      13000 Apartment      \n# ℹ 77 more rows"
  }
]