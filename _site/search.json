[
  {
    "objectID": "In_Class_Exercises/ICE_04/ICE_04.html",
    "href": "In_Class_Exercises/ICE_04/ICE_04.html",
    "title": "In Class Exercise 04: Box plot",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In_Class_Exercises/ICE_04/ICE_04.html#loading-data",
    "href": "In_Class_Exercises/ICE_04/ICE_04.html#loading-data",
    "title": "In Class Exercise 04: Box plot",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In_Class_Exercises/ICE_04/ICE_04.html#box-plot-as-a-contrast-with-more-detailed-visual-representations-from-class",
    "href": "In_Class_Exercises/ICE_04/ICE_04.html#box-plot-as-a-contrast-with-more-detailed-visual-representations-from-class",
    "title": "In Class Exercise 04: Box plot",
    "section": "Box plot as a contrast with more detailed visual representations from class",
    "text": "Box plot as a contrast with more detailed visual representations from class\n\nggplot(data = exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05b.html",
    "href": "Hands_On_Exercises/HOE05/HOE_05b.html",
    "title": "Hands on Exercise 05b: Creating Ternary Plots with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this exercise, we will build ternary plots programmatically using R for visualising and analysing the population structure of Singapore.\nWe will follow 4 steps for this exercise:\n\nInstall and launch tidyverse and ggtern packages\nDerive three new measures using mutate() function of dplyr package\nBuild a static ternary plot using ggtern() function of ggtern package\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05b.html#overview",
    "href": "Hands_On_Exercises/HOE05/HOE_05b.html#overview",
    "title": "Hands on Exercise 05b: Creating Ternary Plots with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this exercise, we will build ternary plots programmatically using R for visualising and analysing the population structure of Singapore.\nWe will follow 4 steps for this exercise:\n\nInstall and launch tidyverse and ggtern packages\nDerive three new measures using mutate() function of dplyr package\nBuild a static ternary plot using ggtern() function of ggtern package\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05b.html#loading-data",
    "href": "Hands_On_Exercises/HOE05/HOE_05b.html#loading-data",
    "title": "Hands on Exercise 05b: Creating Ternary Plots with R",
    "section": "Loading Data",
    "text": "Loading Data\nWe will use two main R packages for this hands-on exercise. They are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js. The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\ntidyverse, a family of R packages for data science processes.\n\n\npacman::p_load(ggtern, plotly, tidyverse)\n\nWe will be using the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data.\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nWe will use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old by unpacking the columns based on year, grouped by their ages using pivot_wider().\n\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  pivot_wider(names_from = AG, values_from = Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05b.html#plotting-ternary-diagram-with-r",
    "href": "Hands_On_Exercises/HOE05/HOE_05b.html#plotting-ternary-diagram-with-r",
    "title": "Hands on Exercise 05b: Creating Ternary Plots with R",
    "section": "Plotting Ternary Diagram with R",
    "text": "Plotting Ternary Diagram with R\n\nPlotting a static ternary diagram\nWe use ggtern() function of ggtern package to create a simple ternary plot.\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWe add a theme for better clarity of visualisation.\n\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2018\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\nPlotting an interative ternary diagram\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Active\"), \n  baxis = axis(\"Young\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~ACTIVE, \n  b = ~YOUNG, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\",\n  mode = \"markers\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04c.html",
    "href": "Hands_On_Exercises/HOE04/HOE_04c.html",
    "title": "Hands on Exercise 04c: Visualising Uncertainty",
    "section": "",
    "text": "In this exercise, we will create statistical graphics for visualising uncertainty, which is relatively new in statistical graphics. We will learn how to:\n\nplot statistics error bars by using ggplot2;\nplot interactive error bars by combining ggplot2, plotly and DT;\ncreate advanced density and distribution plots by using ggdist; and\ncreate hypothetical outcome plots (HOPs) by using the ungeviz package."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04c.html#overview",
    "href": "Hands_On_Exercises/HOE04/HOE_04c.html#overview",
    "title": "Hands on Exercise 04c: Visualising Uncertainty",
    "section": "",
    "text": "In this exercise, we will create statistical graphics for visualising uncertainty, which is relatively new in statistical graphics. We will learn how to:\n\nplot statistics error bars by using ggplot2;\nplot interactive error bars by combining ggplot2, plotly and DT;\ncreate advanced density and distribution plots by using ggdist; and\ncreate hypothetical outcome plots (HOPs) by using the ungeviz package."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04c.html#loading-data",
    "href": "Hands_On_Exercises/HOE04/HOE_04c.html#loading-data",
    "title": "Hands on Exercise 04c: Visualising Uncertainty",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following R packages:\n\nplotly for creating interactive plots,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering),\nDT for displaying interactive html tables,\nggdist for visualising distributions and uncertainty,\ngganimate for creating animation plots, and\ntidyverse, a family of R packages for data science processes.\n\n\npacman::p_load(plotly, crosstalk, DT, ggdist, ggridges, colorspace, gganimate, tidyverse)\n\nWe will still be using Exam_data.csv.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands_On_Exercises/HOE04/HOE_04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands on Exercise 04c: Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample data.\n\n\nIn this section, we will plot error bars of maths scores by race by using data provided in the exam tibble data frame, but first, we must calculate the summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data frame called my_sum.\n\n\n\nIt is unaesthetically pleasing to just display the computed statistics, thus we display the my_sum tibble data frame in an html table format using the knitr package in tidyverse.\n\n\nThe table\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\nThe code\n\nknitr::kable(my_sum, format = 'html')\n\n\n\n\nPlotting standard error bars of point estimates\nNow we plot the standard error bars of mean maths score by race.\n\n\nThe plot\n\n\n\n\n\n\n\n\n\n\n\nThe code\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it already plots aggregated data mean so there is no need to indicate stat=“identity”, which uses raw data without any transformations.\n\n\n\n\n\nPlotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nThe plot\n\n\n\n\n\n\n\n\n\n\n\nThe code\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars are sorted using the average maths scores with the function reorder(RACE, -mean).\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\nVisualizing the uncertainty of point estimates with interactive error bars\nWe will now plot interactive error bars for the 99% confidence interval of mean maths score by race.\n\n\nThe plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04c.html#visualising-uncertainty-ggdist-package",
    "href": "Hands_On_Exercises/HOE04/HOE_04c.html#visualising-uncertainty-ggdist-package",
    "title": "Hands on Exercise 04c: Visualising Uncertainty",
    "section": "Visualising Uncertainty: ggdist package",
    "text": "Visualising Uncertainty: ggdist package\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty. It is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization.\nFor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nFor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\nVisualizing the uncertainty of point estimates: stat_pointinterval()\nHere, we use stat_pointinterval() of ggdist to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nThis function comes with many arguments. In the following, we change the point estimate to median, using a quantile based interval of 95%. Another possible method is to use the highest density interval (hdi) which contain the most probable values of the distribution\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: Two different CI’s on a single plot\nWe now show both the 95% and 99% confidence interval for the mean.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = c(0.95, 0.99),\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising 95% and 99% confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nAs can be seen, the thicker line is shorter, representing the extent of the 95% CI, while the thinner line on the top and bottom of the thick line is extending the CI to 99%.\n\n\nVisualizing the uncertainty of point estimates: stat_gradientinterval()\nHere, we use stat_gradientinterval() of ggdist to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(.width = c(0.70, 0.75, 0.80, 0.85, 0.90),\n                        fill_type = \"segments\",\n                        fill = \"skyblue\",\n                        show.legend = TRUE\n                        ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\nHere we can only perceive 3 different CI from the width due to the size of the plot and the limited changes it can display. We would do well to change the number of CI width arguments to better reflect the gradations.\nThe f values represent the probability density function, where a higher value (darker colour) indicates a region of higher probability density, meaning the estimated mean is more likely to be within that range, while a lower value (lighter colour) represents lower probability density, indicating greater uncertainty or less concentration of values in that region."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands_On_Exercises/HOE04/HOE_04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands on Exercise 04c: Visualising Uncertainty",
    "section": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nInstalling ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\nLaunch the application in R\n\nlibrary(ungeviz)\n\n\n\nBuild the Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\nHere, position_jitter() is used to add slight randomness within those bounds to points, preventing overlap. transition_states() arguments are for the relative times between transition time and state time"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "",
    "text": "We have explored some of the popular statistical graphics methods for visualising distribution e.g. histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2 in Hands On Exercise 1.\nIn this document, we are going to explore two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#overview",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#overview",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "",
    "text": "We have explored some of the popular statistical graphics methods for visualising distribution e.g. histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2 in Hands On Exercise 1.\nIn this document, we are going to explore two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#loading-data",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#loading-data",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following packages:\n\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\nggdist: a ggplot2 extension specially designed for visualising distribution and uncertainty\ncolorspace: an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\nggthemes: a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package\ntidyverse: a family of R packages to meet the modern data science and visual communication needs\n\n\npacman::p_load(ggridges, ggdist, colorspace, ggthemes, tidyverse)\n\nWe will be using Exam_data.csv\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "Visualising Distribution with Ridgeline Plot",
    "text": "Visualising Distribution with Ridgeline Plot\nRidgeline plot (also known as Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nThe figure below is a ridgelines plot showing the distribution of English scores by class.\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\nPlotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plots with R.\nIn this section, we will plot ridgeline plots by using the ggridges package. It provides two main geoms to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe following is plotted by using geom_density_ridges().\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nVarying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient().\nBoth geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nMapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nImportant\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\nRidgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "Visualising Distribution with Raincloud Plot",
    "text": "Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does\nIn this section, we create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\nPlotting a Half Eye graph\nFirst we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which contains a half-density and a slab-interval.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA\n\n\n\n\nAdding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\nAdding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\nFinishing Touches\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04a.html#references",
    "href": "Hands_On_Exercises/HOE04/HOE_04a.html#references",
    "title": "Hands on Exercise 04a: Visualising Distribution",
    "section": "References",
    "text": "References\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#introduction",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#introduction",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Introduction",
    "text": "Introduction\nIn this document, we explore the creation of interactive data visuals using the following packages:\n\nggiraph: a R package that makes ggplot graphics interactive.\nplotly: a R package that plots interactive statistical graphs.\nDT: an interface to the JavaScript library DataTables that creates interactive tables on the html page.\ntidyverse: a family of packages that support data science, analysis and communication tasks with the creation of static statistical graphs.\npatchwork: for compositing figures created using ggplot."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#loading-data",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#loading-data",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Loading Data",
    "text": "Loading Data\nInstall and load packages and libraries\n\npacman::p_load(ggiraph, plotly, \n               DT, tidyverse, patchwork)\n\nRead data file\n\nexam_data = read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visuals-ggiraph-methods",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visuals-ggiraph-methods",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactive Data Visuals: ggiraph methods",
    "text": "Interactive Data Visuals: ggiraph methods\nggiraph is a htmlwidget and a ggplot2 extension which allows ggplot graphics to be interactive. This is done using ggplot interactive geometries via the following 3 aesthetics:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nData_id: a column of data-sets that contain an id to be associated with elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\n\n\nTooltip effect with tooltip aesthetic\nWe will plot an interactive statistical graph by using the ggiraph package by first creating a ggplot object, then the girafe() function of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nAgain, we emphasize the two-step process: first, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will build the basic visual and required settings, and secondly girafe() is called as the engine that generates the svg object to be displayed on a html page."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactivity",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactivity",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactivity",
    "text": "Interactivity\nBy hovering our cursor over a data point, we see the student’s ID as specified in aes(tooltip = ID)\n\n\n\n\n\n\n\nDisplaying multiple pieces of information in tooltip\nThe content of the tooltip can be customised by including a list object as below\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nObserve the first three lines of code create a new column called tooltip in the data which is a concatenation of names from existing columns. This newly created field is then used as the tooltip argument which will show up in the interactive plot."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactivity-1",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactivity-1",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactivity",
    "text": "Interactivity\nBy hovering our cursor over a data point, we see the student’s ID and Class.\n\n\n\n\n\n\n\nCustomising tooltip style\nWe can use opts_tooltip() of ggiraph to customize tooltip rendering by adding css declarations.\n\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\"\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(                                \n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(\n      css = tooltip_css))\n)                                   \n\n\n\n\n\n\n\n\n\nCustomising tooltip style\nWe can use opts_tooltip() of ggiraph to customize tooltip rendering by adding css declarations.\n\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\"\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(                                \n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(\n      css = tooltip_css))\n)                                   \n\nNotice now that the tooltip has a white background and black bolded text.\n\n\n\n\n\n\nWe will use these customizations as a reference to learn more.\n\n\nDisplaying statistics on tooltip\nThe code below is an advanved implementation of tooltip customization. Here, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)       #format y (mean) with specified accuracy\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS,             #calculates the statistics\n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n               fun.data = \"mean_se\",      #mean and standard error of mean\n               geom = GeomInteractiveCol, #interactive bar\n               fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\nHere a function is used to compute a 90% confidence interval of the mean, and the statistics are then displayed on the tooltip.\n\n\n\n\n\n\n\n\nHover Effect with data_id aesthetic\nThe code chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618    \n)\n\nIn this aesthetic, elements associated with the same data_id, which is the CLASS in this case, will be highlighted when a specific data point is moused over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\nChanging data_id style\nWe make some style changes using CSS by encoding it directly in the girafe() engine options\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\") #for non-highlighted data_id\n    ) \n)                                       \n\n\n\n\n\n\n\n\nCombining tooltip and hover effects\nThere are times when we would want to combine the above two aesthetics we’ve seen so far\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n    )\n)\n\nBy combining tooltip and data_id arguments in geom_dotplot_interactive(), elements associated with the same data_id (CLASS) will be highlighted upon mouse over, and at the same time the tooltip will show the CLASS\n\n\n\n\n\n\n\n\nClick effect with onclick\nThe onclick aesthetic of ggiraph provides hotlink interactivity on the web.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",          #sprintf is R string formatter, window.open is JavaScript, %s placeholders \n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618)\n\nThe click action must be in the data point for the link to be triggered. Generally clicking in the plot where there is no data point will not trigger the onclick.\n\n\n\n\n\n\n\n\nCoordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\nThe plotsThe code\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy needs to be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactive Data Visualisation - plotly methods",
    "text": "Interactive Data Visualisation - plotly methods\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are by using:\n\nplot_ly(), and\nggplotly()\n\n\nCreating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\nWorking with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE). ::: {.panel-tabset} #### The plot\n\n\n\n\n\n\n\nThe code\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n:::\n\n\n\n\nCreating an interactive scatter plot: ggplotly() method\nThe code chunk below plots a generic interactive scatter plot by using ggplotly(). It provides the coordinates of the plots as a default.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\nCoordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nsubplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "Interactive Data Visualisation - crosstalk methods",
    "text": "Interactive Data Visualisation - crosstalk methods\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\nInteractive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\nLinked brushing: crosstalk method\nThe code chunk below is used to implement coordinated brushing.\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),       #interactive highlighting\n                \"plotly_selected\") #plot will respond to selection events e.g. clicking, brushing, lasso selection\n\ncrosstalk::bscols(gg, \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03a.html#references",
    "href": "Hands_On_Exercises/HOE03/HOE_03a.html#references",
    "title": "Hands on Exercise 03: Interactive Data Visualisations with R",
    "section": "References",
    "text": "References\n\nggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nCustomizing interactive elements in ggiraph\n\n\n\nplotly for R\n\nGetting Started with Plotly in R\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny\nGetting Started with gganimate"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "",
    "text": "In this document, we will explore ggplot2 for creating elegant and functional statistical graphics"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#introduction",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#introduction",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "",
    "text": "In this document, we will explore ggplot2 for creating elegant and functional statistical graphics"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#loading-data",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#loading-data",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Loading Data",
    "text": "Loading Data\nLoad tidyverse\n\npacman::p_load(tidyverse)\n\nRead data file\n\nexam_data = read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#first-glance-comparing-graphics",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#first-glance-comparing-graphics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "First Glance: Comparing Graphics",
    "text": "First Glance: Comparing Graphics\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\nHere the code is simple\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nHere, there are more paramters to customise, but the mapping between variables and the properties of interest are more visible here"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#grammar-of-graphics",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#grammar-of-graphics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nBefore we dive in, We need to understand that there is a scheme for data visualization which breaks up graphs into components such as scales and layers.\nThese consist of:\n\nData: The dataset being plotted.\nAesthetics, which take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets, which split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, which are statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems, which define the plane on which data are mapped on the graphic.\nThemes, which modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-1-data",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-1-data",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 1: Data",
    "text": "Essential Grammatical Element 1: Data\nWe call ggplot2 using\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nThis initialises a ggplot object and displays a blank canvas"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-2-aesthetics",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-2-aesthetics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 2: Aesthetics",
    "text": "Essential Grammatical Element 2: Aesthetics\nAesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call, as below\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\nThis draws the x-axis together with the label."
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-2-geometrics",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-element-2-geometrics",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Element 2: Geometrics",
    "text": "Essential Grammatical Element 2: Geometrics\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_bar for drawing bar charts\ngeom_dotplot for counting occurrences of a variable\ngeom_histogram for drawing a histogram\ngeom_density for drawing kernel density estimates\ngeom_boxplot for drawing vertical boxplots\ngeom_violin for drawing violin plots\ngeom_point for drawing a scatter plot\ngeom_line for drawing line charts\ngeom_smooth for drawing simple trends with smoothed lines\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map (The data to be used in these maps are passed using the map_data() function)\n\n\nGeometric Objects: geom_bar()\nPlot bar charts\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=GENDER)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_dotplot()\nIn a dot plot, dots are stacked, with each dot representing one observation. By default, ggplot2 sets the bin width to 1/30th of the range of the data. This default value may not always produce an optimal histogram, so it would be better to specify the binning\nThe code below plots a dot plot\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot(binwidth = 5,\n               dotsize = 0.3)\n\n\n\n\n\n\n\n\nObserve the scale of the y-axis is very misleading, and in fact has gone out of range for 5 of our bins, so we use the scale_y_continuous() method to turn off the y-axis including it’s break marks, and adjust the dotsize for visibility\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_histogram()\nA simple histogram is created using the ENGLISH field from exam_data\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects Modification Using arguments\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20. Note that binwidth argument overrides this\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\nGeometric Objects Modification using aes()\n\nThe code chunk below fills the histogram with colour by using a sub-group of aesthetic()\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nGeometric Objects: geom_density() This computes and plots a kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_density() \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour argument of aes()\n\nggplot(data=exam_data, \n       aes(x = ENGLISH, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_boxplot()\nThis displays a vertiacal continuous value diagram. It visualises five summary statistics (the median, two quartiles, and two extreme values), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\n\n\n\nInstead of rectangular boxes, we can use notches to help visually assess whether the medians of distributions differ. This is useful when the medians are close together, to determine whether the medians are equal.\nA notched plot is identical to a box_plot, except the existence of a notch argument\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_violin()\nThis creates a violin plot, which is a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nWe plot the distribution of English scores by gender in a violin plot.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_point()\nThis creates a scatterplot.\nWe plot the scatter showing the Maths and English grades of students.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y= ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\ngeom objects can be combined\nWe plot the scatter on the boxplot using the code chunk below\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\nThe order of the plots matter. In this case, the scatter plot has been overlaid on the boxplot as the boxplot code comes first."
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat_()\nThe boxplots below are incomplete because the positions of the means are not displayed.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)\n\n\n\n\n\n\n\n\n\n\nWorking with stat - the geom_() method\nThe code chunk below adds mean values by using the geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\nAdding a best fit curve on a scatterplot\nWe return to the scatterplot previously showing the relationship of Maths and English grades of students\n\n\n\n\n\n\n\n\n\nThe interpretability of this graph can be improved by adding a best fit curve.\nWe use geom_smooth() to fit a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=1)\n\n\n\n\n\n\n\n\nThe default smoothing method uses Locally Estimated Scatterplot Smoothing (LOESS), but can be overridden to a linear best fit curve as below\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=1)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: facets",
    "text": "Essential Grammatical Elements in ggplot2: facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap().\n\nWorking with facet_wrap()\nfacet_wrap() wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet_wrap() which divides the plot into multiple panels based on the values of the variable &lt;span style= background-color: #D3D3D3;“&gt;CLASS.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nWorking with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\nWorking with Coordinates\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the y and x-axis range\nThe previous scatterplot with best fit line is slightly misleading because the y-axis and x-axis ranges are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=1)\n\n\n\n\n\n\n\n\nThe code chunk below fixes both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "Essential Grammatical Elements in ggplot2: Themes",
    "text": "Essential Grammatical Elements in ggplot2: Themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of themes can be found at this link. Each theme element can be conceived of as either a line (e.g.x-axis), a rectangle (e.g.graph background), or text (e.g.axis title). ### Working with themes The code chunk below plots a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nThe below plots the same using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nAnd another example using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands_On_Exercises/HOE01/HOE_01.html#references",
    "href": "Hands_On_Exercises/HOE01/HOE_01.html#references",
    "title": "Hands on Exercise 01: ggplot2 Graphics",
    "section": "References",
    "text": "References\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This webpage contains the deliverables of my course in ISSS608 Visual Analytics and Applications at SMU."
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html",
    "href": "Hands_On_Exercises/HOE00/HOE00.html",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "Load tidyverse into r env by using code chunk below freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#getting-started",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#getting-started",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "",
    "text": "Load tidyverse into r env by using code chunk below freeze parameter prevents running of code chunks\n\npacman::p_load(tidyverse)\n\nImporting data (Old way - deprecated)\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#importing-data-new-way",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#importing-data-new-way",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Importing data (New way)",
    "text": "Importing data (New way)\nUses readr to import csv as a tibble data.frame\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#pivoting-data",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#pivoting-data",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Pivoting data",
    "text": "Pivoting data\n%&gt;% sequentially processes functions, called “pipe”\n\npopdata_long = popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#writing-and-reading-the-file",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#writing-and-reading-the-file",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Writing and reading the file",
    "text": "Writing and reading the file\nrds is a r data serialisation *Remember to add rds folder to .gitignore as it is a data folder\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")\n\n\npopdata_long = read_rds(\"rds/popdata_long.rds\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE00/HOE00.html#working-with-dplyr-package",
    "href": "Hands_On_Exercises/HOE00/HOE00.html#working-with-dplyr-package",
    "title": "Hands On Ex 00: Working with Tidyverse",
    "section": "Working with dplyr package",
    "text": "Working with dplyr package\n\nselect() function\n\nrealis2019_selected = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 4\n   `Project Name`           `Type of Sale` `Unit Price ($ psm)` `Property Type` \n   &lt;chr&gt;                    &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;           \n 1 PEIRCE VIEW              Resale                         7434 Condominium     \n 2 FLORIDA PARK             Resale                         9737 Semi-Detached H…\n 3 BULLION PARK             Resale                        11467 Condominium     \n 4 CASTLE GREEN             Resale                         9346 Condominium     \n 5 HAPPY ESTATE             Resale                        10183 Semi-Detached H…\n 6 TEACHER'S HOUSING ESTATE Resale                        12659 Terrace House   \n 7 THE PANORAMA             Resale                        16064 Condominium     \n 8 THE PANORAMA             Resale                        16905 Condominium     \n 9 CHIP THYE GARDEN         Resale                        13500 Terrace House   \n10 TEACHER'S HOUSING ESTATE Resale                         9935 Terrace House   \n# ℹ 19,505 more rows\n\n\n\n\nfilter() function\n\nrealis2019_filtered = realis2019_selected %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\n\ncombining both functions\n\nrealis2019_combined = realis2019 %&gt;%\n  select(`Project Name`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`) %&gt;%\n  filter(`Property Type` ==\"Condominium\" |\n          `Property Type`== \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\nrealis2019_filtered\n\n# A tibble: 87 × 4\n   `Project Name`        `Type of Sale` `Unit Price ($ psm)` `Property Type`\n   &lt;chr&gt;                 &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;          \n 1 RIVERFRONT RESIDENCES New Sale                      12863 Apartment      \n 2 RIVERFRONT RESIDENCES New Sale                      12809 Apartment      \n 3 RIVERFRONT RESIDENCES New Sale                      12848 Apartment      \n 4 RIVERFRONT RESIDENCES New Sale                      12875 Apartment      \n 5 RIVERFRONT RESIDENCES New Sale                      12962 Apartment      \n 6 RIVERFRONT RESIDENCES New Sale                      12915 Apartment      \n 7 RIVERFRONT RESIDENCES New Sale                      12513 Apartment      \n 8 RIVERFRONT RESIDENCES New Sale                      12838 Apartment      \n 9 RIVERFRONT RESIDENCES New Sale                      12970 Apartment      \n10 RIVERFRONT RESIDENCES New Sale                      13000 Apartment      \n# ℹ 77 more rows"
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this document, we explore several ggplot2 extensions for creating elegant and effective statistical graphics.\nBesides tidyverse, we will use 4 additional R packages:\n\nggrepel: an R package that provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package that provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package that provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for compositing figures created using ggplot2."
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#introduction",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#introduction",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this document, we explore several ggplot2 extensions for creating elegant and effective statistical graphics.\nBesides tidyverse, we will use 4 additional R packages:\n\nggrepel: an R package that provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package that provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package that provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for compositing figures created using ggplot2."
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#loading-data",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#loading-data",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Loading Data",
    "text": "Loading Data\nInstall and load packages and libraries\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\nRead data file\n\nexam_data = read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Beyond ggplot2 Annotation: ggrepel",
    "text": "Beyond ggplot2 Annotation: ggrepel\nggrepel is an extension of ggplot2 which provides geoms for ggplot2 to repel overlapping text. This has to do with annotations on a large number of data points in a statistical graph.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nAs can be seen the ID labels are very messy and don’t provide visual information.\n\nUsing ggrepel\nWe fix this by replacing geom_label() with geom_label_repel(), and geom_text() with geom_text_repel()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nThis eliminates overlapping labels, improving the clarity of our visualizations."
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-ggplot2-themes",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-ggplot2-themes",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Beyond ggplot2 themes",
    "text": "Beyond ggplot2 themes\nggplot2 comes with eight built-in themes: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nAn example: theme_light() is shown below\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey90\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\nWorking with ggthemes\nggthemes provides themes with geoms and scales that replicate the look of visualisations by renowned publications e.g. theme_economist(), theme_excel(), theme_calc(), theme_igray(), theme_wsj(), theme_stata(), theme_solarized(), theme_fivethirtyeight() e.t.c.\nThe example below uses The Economist’s theme\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\nWorking with hrbthemes\nThis packages provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. With a few additional arguments, we can make quick emphasis during a production workflow environment.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\nIn the above, we used the axis_title_size argument to increase the font size of the axis title to 18, base_size argument to increase the default axis label font size to 15, andgrid argument to display only the y-axis grid lines."
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-a-single-graph",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#beyond-a-single-graph",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Beyond a Single Graph",
    "text": "Beyond a Single Graph\nMultiple graphs are normally required to tell a compelling visual story, and several ggplot2 extensions provide functions to compose figure with multiple graphs. Before we combine multiple graphs to create a composite plot, let us look at three individual graphs on their own.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme(plot.title = element_text(size=10))\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\") +\n  theme(plot.title = element_text(size=10))\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point(size=1) +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\") +\n  theme(plot.title = element_text(size=9))\n\n\n\n\n\nCreating Composite Graphics: patchwork methods\nSeveral ggplot2 extension packages support the compositing of graphs, such as gridExtra package’s grid.arrange() and cowplot package’s plot_grid(). Here, we shall work with the patchwork package, which is specially designed for combining separate ggplot2 graphs into a single figure.\npatchwork has a very simple syntax to create composite layouts easily. It uses a combination of:\n\nplus sign + to create a two-column layout\nparenthesis () to create a subplot group\ndivision sign / to create a two-row layout\n\n\n\nCombining two ggplot2 graphs\nThe two histograms we saw indiivudally earlier will be combined using the simple addition of a + sign, as below\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\nCombining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs on top of each other,\n“|” operator to place plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\nCreating composite pictures with tags\npatchwork also provides auto-tagging capabilities to identify subplots, as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\nCreating picture inlays\nBesides providing functions to place plots next to each other, patchwork allows us to place one or several plots elements freely on top or below another plot with the inset_element() function.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\nCreating a composite figure with theme\nWe now combine patchwork with ggthemes for appealing visuals.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() & theme(plot.title = element_text(size = 15))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE02/HOE_02.html#references",
    "href": "Hands_On_Exercises/HOE02/HOE_02.html#references",
    "title": "Hands on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "References",
    "text": "References\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics will tend to attract the interest of the audience and make a deeper impression than static graphics.\nIn this exercise, we will create animated data visualisations by using the gganimate and plotly r packages.At the same time, we will also learn how to (i) reshape data by using the tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nWe first introduce some of the key concepts and terminology related to this type of visualization\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore making animated graphs, one should ask oneself: Does it make sense to go through the effort? If you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#overview",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#overview",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics will tend to attract the interest of the audience and make a deeper impression than static graphics.\nIn this exercise, we will create animated data visualisations by using the gganimate and plotly r packages.At the same time, we will also learn how to (i) reshape data by using the tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nWe first introduce some of the key concepts and terminology related to this type of visualization\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore making animated graphs, one should ask oneself: Does it make sense to go through the effort? If you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#loading-data",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#loading-data",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, a ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(plotly, gganimate, gifski, gapminder, tidyverse, readxl)\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nIn the above, mutate_at() of dplyr package is used to convert all character data types into factors. A factor is a data type in R used to represent categorical variables. These store data as integer values with corresponding ‘levels’, making them memory-efficient.\nInstead of the above using mutate_at(), we can use across to achieve the same output with the basic mutate()\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "Animated Data Visualisation: gganimate Methods",
    "text": "Animated Data Visualisation: gganimate Methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nBuilding a static population bubble plot\nWe first create a static bubble plot for reference\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\nBuilding the animated bubble plot\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#animated-data-visualisation-plotly",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#animated-data-visualisation-plotly",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "Animated Data Visualisation: plotly",
    "text": "Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\nBuilding an animated bubble plot: ggplotly() method\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\nBuilding an animated bubble plot: plot_ly() method\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 12),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands_On_Exercises/HOE03/HOE_03b.html#references",
    "href": "Hands_On_Exercises/HOE03/HOE_03b.html#references",
    "title": "Hands on Exercise 04: Programming Animated Statistical Graphics with R",
    "section": "References",
    "text": "References\n\nGetting Started\nBuilding an animation step-by-step with gganimate"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\nggstatplot  is an extension of the ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves in order to:\n\nprovide alternative statistical inference methods by default;\nfollow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html#overview",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html#overview",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\nggstatplot  is an extension of the ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves in order to:\n\nprovide alternative statistical inference methods by default;\nfollow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html#loading-data",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html#loading-data",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "Loading data",
    "text": "Loading data\nWe will use ggstatsplot and tidyverse packages\n\npacman::p_load(ggstatsplot, tidyverse)\n\nWe will be using Exam_data.csv\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html#one-sample-test-gghistostats-method",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html#one-sample-test-gghistostats-method",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "One-sample test: gghistostats() method",
    "text": "One-sample test: gghistostats() method\nWe build a visual of one-sample test on English scores using gghistostats()\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information from left to right: - (logarithm of) Bayes Factor: Indicates the strength of evidence in favor of the alternative hypothesis (that the mean of ENGLISH is different from 60) versus the null hypothesis - posterior probability: he probability that the alternative hypothesis is true given the data sample sizes - Mean & Credible Interval: The posterior estimate of the mean and its uncertainty range - scale parameter (r) of the JZS (Jeffreys-Zellner-Siow) Cauchy prior\n\nUnderstanding the Bayes Factor\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories. That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as \nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\nInterpreting the Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n ## Two-sample mean test: ggbetweenstats()\nWe build a visual for two-sample non-parametric test of Maths scores by gender using ggbetweenstats()\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information from left to right: - Mann-Whitney test statistic (W) - p-value - Rank-Biserial Correlation (r): quantifies how much one group tends to have higher values than the other - Confidence Interval for r - Number of observations\n\n\nOneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\npairwise.display parameters: - “ns” –&gt; only non-significant - “s” –&gt; only significant - “all” –&gt; everything\n\nggbetweenstats - Summary of tests\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Correlation: ggscatterstats()\nHere we build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Association (Depedence) : ggbarstats() methods\nWe first bin the Maths scores into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04b.html#visualising-models",
    "href": "Hands_On_Exercises/HOE04/HOE_04b.html#visualising-models",
    "title": "Hands on Exercise 04b: Visual Statistical Analysis",
    "section": "Visualising Models",
    "text": "Visualising Models\nIn this section, we will visualise model diagnostic and model parameters by using the parameters package.\nWe will use the Toyota Corolla case study to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\nLoading data\n\npacman::p_load(readxl, performance, parameters, see)\n\nWe will ingest the ToyotaCorolla.xls workbook and convert it into a tibble dataframe using R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\nMultiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nModel Diagnostic: checking for multicolinearity\nWe check for multicollinearity in the features of the model using check_collinearity() of the performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\nWe check for normality in the data using check_normality() of the performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\nWe use check_heteroscedasticity() of the performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Complete check\nWe can perform a complete check by using check_model()\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: see methods\nWe use plot() of see package and parameters() of parameters package to visualise the weights of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: ggcoefstats() methods\nWe use ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_4d.html",
    "href": "Hands_On_Exercises/HOE04/HOE_4d.html",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "",
    "text": "In this exercise, we will build funnel plots for, which is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. We will learn how to:\n\nbuild funnel plots by using the funnelPlotR package;\nbuild static funnel plots by using the basic ggplot2 package, and;\nbuild interactive funnel plots by using both plotly R and ggplot2 packages"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_4d.html#overview",
    "href": "Hands_On_Exercises/HOE04/HOE_4d.html#overview",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "",
    "text": "In this exercise, we will build funnel plots for, which is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. We will learn how to:\n\nbuild funnel plots by using the funnelPlotR package;\nbuild static funnel plots by using the basic ggplot2 package, and;\nbuild interactive funnel plots by using both plotly R and ggplot2 packages"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_4d.html#loading-data",
    "href": "Hands_On_Exercises/HOE04/HOE_4d.html#loading-data",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following R packages: - FunnelPlotR for creating funnel plots, - plotly for creating interactive funnel plots, - ggplot2 for creating funnel plots manually, - knitr, for building static html tables, - tidyverse, a family of R packages for data science processes.\n\npacman::p_load(FunnelPlotR, plotly, knitr, tidyverse)\n\nWe will be using COVID-19_DKI_Jakarta.csv to compare the cumulative COVID-19 cases and deaths by sub-district (kelurahan in the Indonesian language) as at 31st July 2021, DKI Jakarta.\n\ncovid19  &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_4d.html#funnelplotr-methods",
    "href": "Hands_On_Exercises/HOE04/HOE_4d.html#funnelplotr-methods",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "FunnelPlotR methods",
    "text": "FunnelPlotR methods\nThe FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are: - limit: plot limits (95 or 99) - label_outliers: to label outliers (true or false) - Poisson_limits: to add Poisson limits to the plot - OD_adjust: to add overdispersed limits to the plot - xrange and yrange: to specify the range to display for axes, acting like a zoom function - Other aesthetic components such as graph title, axis labels etc\n\nFunnelPlotR methods: The basic plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThis creates a funnel plot object with 267 points, of which 0 are outliers. The plot has been adjusted for overdispersion, which is when the variance of a dataset is greater than what is expected under the given statistical model.\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup in this function is different from that of a scatterplot, which plots alll individual points. Here, it defines the statistic of the level of the points to be plotted i.e. Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_type argument is “SR” for standardised ratio. This refers to the number of observed to the number of expected deaths from the data\nlimit plots limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\nFunnelPlotR methods: Makeover 1\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions and rates).\nxrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\n\nFunnelPlotR methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",           \n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_4d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands_On_Exercises/HOE04/HOE_4d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "Funnel Plot for Fair Visual Comparison: ggplot2 methods\nHere we will build funeel plots step by step using ggplot2. This will enhance our working experience of ggplot2 to customise speciallised data visualisations like funnel plots.\n\nCompute the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed weighting the rate according to the inverse of it’s variance. This means that observations with lower standard errors rate.se are given more weight.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\nWe calculate the confidence intervals for different sample sizes to form the funnel shape:\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nPlot a static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_4d.html#the-funnel-plot-created-using-ggplot2-functions-can-be-made-interactive-with-ggplotly-of-plotly-r-package.",
    "href": "Hands_On_Exercises/HOE04/HOE_4d.html#the-funnel-plot-created-using-ggplot2-functions-can-be-made-interactive-with-ggplotly-of-plotly-r-package.",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "The funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly R package.",
    "text": "The funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly R package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_4d.html#references",
    "href": "Hands_On_Exercises/HOE04/HOE_4d.html#references",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "References",
    "text": "References\n\nfunnelPlotR package\nFunnel Plots for Indirectly-standardised ratios\nChanging funnel plot options"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.\nTake a look at this mathematical function."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "",
    "text": "The correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing the correlation matrix for a dataset:\n\nTo reveal the relationship between high-dimensional variables in a pair-wise manner;\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tends to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this exercise, we will learn how to perform data visualisations for correlation matrices. We will proceed in 3 sections:\n\nCreate correlation matrices using pairs() of R Graphics\nPlot corrgrams using the corrplot package in R\nCreate an interactive correlation matrix using plotly R"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html#overview",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html#overview",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "",
    "text": "The correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing the correlation matrix for a dataset:\n\nTo reveal the relationship between high-dimensional variables in a pair-wise manner;\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tends to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this exercise, we will learn how to perform data visualisations for correlation matrices. We will proceed in 3 sections:\n\nCreate correlation matrices using pairs() of R Graphics\nPlot corrgrams using the corrplot package in R\nCreate an interactive correlation matrix using plotly R"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html#loading-data",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html#loading-data",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following R packages:\n\ncorrplot package that provides a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables;\nggstatsplot package to create visual graphics with rich statistical information;\ntidyverse, a family of R packages for data science processes.\n\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\nWe will use the Wine Quality Dataset of UCI Machine Learning Repository, which consists of 13 variables and 6497 observations. The dataset already combines red wine and white wine data into one csv file.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nWe note that besides quality, type, free sulfur dioxide, and total sulfur dioxide columns, the rest of the features are continuous numerical data."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html#building-correlation-matrix-pairs-method",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html#building-correlation-matrix-pairs-method",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "Building Correlation Matrix: pairs() method",
    "text": "Building Correlation Matrix: pairs() method\nThere is more than one way to build scatterplot matrices with R. In this section, we will create a scatterplot matrix by using the pairs function of R Graphics.\n\nBuilding a basic correlation matrix\nThe figure below shows the scatter plot matrix of Wine Quality Data as an 12 by 12 matrix.\n\npairs(wine[,1:12])\n\n\n\n\n\n\n\n\nThe input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple and uses the default pairs function. Columns 1 to 12 of wine dataframe are used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol, and quality.\nWe notice that quality column is the label, so we will use the features in columns 1 to 11 only.\n\n\nDrawing only the lower triangle\npairs function of R Graphics provids many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both because a correlation matrix is symmetric. To show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,1:11], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the lower.panel argument.\n\npairs(wine[,1:11], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\nIncluding correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, we can use the panel.cor function. This will also show higher correlations in a larger font in the upper triangle of the matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,1:11], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "Visualising Correlation Matrix: ggcormat()",
    "text": "Visualising Correlation Matrix: ggcormat()\nOne of the major limitations of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To overcome this problem, the Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nAt least three R packages provide functions to plot corrgrams, and they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R packages like ggstatsplot also provide functions for building corrgrams.\nIn this section, we will visualise a correlation matrix using ggcorrmat()  of ggstatplot package\n\nThe basic plot\nOne of the advantages of using ggcorrmat() over other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\nTheses consist of values which are not sorted, so we improve the plot by implementing hierarchical clustering to group similar features tugether, making patterns more visible.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nhc.order argument implements hierarchical clustering to the data\nggcorrplot.args argument provides additional (mostly aesthetic) arguments that will be passed to the ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\n\nThe following sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html#building-multiple-plots",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html#building-multiple-plots",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "Building multiple plots",
    "text": "Building multiple plots\nSince ggstatsplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\nto build a facet plot, the only argument needed is grouping.var. Here, a robust correlation method which is percentage bend correlation is used, and the p-value us adjusted for multiple comparisons using Holm’s method\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nSimilarly, annotation.args argument calls the plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "Visualising Correlation Matrix using corrplot Package",
    "text": "Visualising Correlation Matrix using corrplot Package\nWe now move to the main package to be explored in this exercise, which is the corrplot package.\n\nGetting started with corrplot\nWe recompute the correlation matrix of the wine data frame using this packaage and plot the corrgram using corrplot(), with setting all at default.\n\nwine.cor &lt;- cor(wine[, 1:11])\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colours or saturation is used to represent the strength of the correlation coefficient. Darker colours and larger circles indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours and smaller circles indicates relatively weaker linear relationship.\n\n\nWorking with visual geometrics\nIn the corrplot package, there are seven visual geometrics (a parameter method) that can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle, but this default setting can be changed by using the method argument as shown below.\n\ncorrplot(wine.cor, \n         method = \"pie\") \n\n\n\n\n\n\n\n\n\n\nWorking with layouts\ncorrplot() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which displays the full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nWe can further customise the layout by using the diag argument to turn off the diagonal cells, and the tl.col argument to change the axis text label colour to black as shown below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         cl.cex = 0.8)\n\n\n\n\n\n\n\n\nOther arguments would include tl.pos, tl.cex, tl.offset for the text labels, and cl.pos, cl.cex, cl.offset for the colour legend"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html#working-with-mixed-layouts",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html#working-with-mixed-layouts",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "Working with mixed layouts",
    "text": "Working with mixed layouts\nWith the corrplot package, it is possible to design corrgrams which are mixed: a visual matrix in one triangle and a numerical matrix in the other triangle. In order to create a coorgram with such mixed layout, corrplot.mixed(), a wrapped function for mixed visualisation styles will be used.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"n\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that arguments lower and upper are used to define the visualisation method used. In this case ellipses are used to map the lower half of the corrgram and numbers are used to map the upper half of the corrgram. The argument tl.pos is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram, in this case none.\n\nCombining corrgrams with the significant test\nIn statistical analysis, we are also interested to know which pair of variables have correlation coefficients which are statistically significant.\nWith the corrplot package, we can use the cor.mtest() function to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function to feed the calculated p-values into the visual.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\nThe figure above shows the corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at a significance level of 0.05, but not the pair between total sulfur dioxide and citric acid.\n\n\nReordering a corrgram\nMatrix reordering is very important to mine the hiden structures and patterns in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-written by using the order argument of corrplot(). Currently, corrplot package supports four sorting methods:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used. “hclust.method” should be one of “ward”, “ward.D”, “ward.D2”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n“alphabet” for alphabetical order.\n\nMore algorithms can be found in the seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\nReordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 5)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05a.html#references",
    "href": "Hands_On_Exercises/HOE05/HOE_05a.html#references",
    "title": "Hands on Exercise 05a: Visual Correlation Analysis",
    "section": "References",
    "text": "References\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. The American Statistician, 56, 316–324.\n\nR Packages\n\nggcormat() of ggstatsplot package\ncorrplot, a graphical display of a correlation matrices or general matrices. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram, which calculates correlation of variables and displays the results graphically. Includes panel functions that can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04d.html",
    "href": "Hands_On_Exercises/HOE04/HOE_04d.html",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "",
    "text": "In this exercise, we will build funnel plots for, which is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. We will learn how to:\n\nbuild funnel plots by using the funnelPlotR package;\nbuild static funnel plots by using the basic ggplot2 package, and;\nbuild interactive funnel plots by using both plotly R and ggplot2 packages"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04d.html#overview",
    "href": "Hands_On_Exercises/HOE04/HOE_04d.html#overview",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "",
    "text": "In this exercise, we will build funnel plots for, which is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. We will learn how to:\n\nbuild funnel plots by using the funnelPlotR package;\nbuild static funnel plots by using the basic ggplot2 package, and;\nbuild interactive funnel plots by using both plotly R and ggplot2 packages"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04d.html#loading-data",
    "href": "Hands_On_Exercises/HOE04/HOE_04d.html#loading-data",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following R packages:\n\nFunnelPlotR for creating funnel plots,\nplotly for creating interactive funnel plots,\nggplot2 for creating funnel plots manually,\nknitr, for building static html tables,\ntidyverse, a family of R packages for data science processes.\n\n\npacman::p_load(FunnelPlotR, plotly, knitr, tidyverse)\n\nWe will be using COVID-19_DKI_Jakarta.csv to compare the cumulative COVID-19 cases and deaths by sub-district (kelurahan in the Indonesian language) as at 31st July 2021, DKI Jakarta.\n\ncovid19  &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04d.html#funnelplotr-methods",
    "href": "Hands_On_Exercises/HOE04/HOE_04d.html#funnelplotr-methods",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "FunnelPlotR methods",
    "text": "FunnelPlotR methods\nThe FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99)\nlabel_outliers: to label outliers (true or false)\nPoisson_limits: to add Poisson limits to the plot\nOD_adjust: to add overdispersed limits to the plot\nxrange and yrange: to specify the range to display for axes, acting like a zoom function\nOther aesthetic components such as graph title, axis labels etc\n\n\nFunnelPlotR methods: The basic plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThis creates a funnel plot object with 267 points, of which 0 are outliers. The plot has been adjusted for overdispersion, which is when the variance of a dataset is greater than what is expected under the given statistical model.\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup in this function is different from that of a scatterplot, which plots alll individual points. Here, it defines the statistic of the level of the points to be plotted i.e. Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_type argument is “SR” for standardised ratio. This refers to the number of observed to the number of expected deaths from the data\nlimit plots limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\nFunnelPlotR methods: Makeover 1\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions and rates).\nxrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\n\nFunnelPlotR methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",           \n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands_On_Exercises/HOE04/HOE_04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "Funnel Plot for Fair Visual Comparison: ggplot2 methods\nHere we will build funeel plots step by step using ggplot2. This will enhance our working experience of ggplot2 to customise speciallised data visualisations like funnel plots.\n\nCompute the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed weighting the rate according to the inverse of it’s variance. This means that observations with lower standard errors rate.se are given more weight.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\nWe calculate the confidence intervals for different sample sizes to form the funnel shape:\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nPlot a static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04d.html#the-funnel-plot-created-using-ggplot2-functions-can-be-made-interactive-with-ggplotly-of-plotly-r-package.",
    "href": "Hands_On_Exercises/HOE04/HOE_04d.html#the-funnel-plot-created-using-ggplot2-functions-can-be-made-interactive-with-ggplotly-of-plotly-r-package.",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "The funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly R package.",
    "text": "The funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly R package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands_On_Exercises/HOE04/HOE_04d.html#references",
    "href": "Hands_On_Exercises/HOE04/HOE_04d.html#references",
    "title": "Hands on Exercise 04d: Funnel Plots for Fair Comparison",
    "section": "References",
    "text": "References\n\nfunnelPlotR package\nFunnel Plots for Indirectly-standardised ratios\nChanging funnel plot options"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05c.html",
    "href": "Hands_On_Exercises/HOE05/HOE_05c.html",
    "title": "Hands on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observations (or records) in rows and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this exercise, we will use R to plot static and interactive heatmaps for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05c.html#overview",
    "href": "Hands_On_Exercises/HOE05/HOE_05c.html#overview",
    "title": "Hands on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observations (or records) in rows and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this exercise, we will use R to plot static and interactive heatmaps for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05c.html#loading-data",
    "href": "Hands_On_Exercises/HOE05/HOE_05c.html#loading-data",
    "title": "Hands on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following packages:\n\nseriation provides reordered heatmaps, color images and clustering visualizations like dissimilarity plots, and visual assessment of cluster tendency plots;\nheatmaply provides the needed information for producing a heatmap;\ndendextend provides general functions for handling tree-like structures;\ntidyverse, a family of R packages for data science processes.\n\n\npacman::p_load(seriation, heatmaply, dendextend, tidyverse)\n\nWe will be using the World Happiness Report 2018, which has be extracted and reduced to a simplified csv.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nWe will need to change the rows to be indexed by country name instead of row number, which we do as follows:\n\nrow.names(wh) &lt;- wh$Country\n\nWe will need the data to be in a matrix form to make the heatmap, but the data is in the form of a tibble (data frame). We will transform the data frame into a data matrix as follows:\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05c.html#static-heatmap",
    "href": "Hands_On_Exercises/HOE05/HOE_05c.html#static-heatmap",
    "title": "Hands on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Static Heatmap",
    "text": "Static Heatmap\nThere are many R packages and functions that can be used to drawing static heatmaps:\n\nheatmap() of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap is short for Pretty Heatmap, which provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. It draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package. It is a system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here. here.\n\nIn this section, we will plot static heatmaps by using heatmap() of R Stats package.\n\nheatmap() of R Stats\nIt is quite straighforward to plot a cluster heatmap\n\nheatmap(wh_matrix)\n\n\n\n\n\n\n\n\nThe order of both rows and columns is different compared to the native wh_matrix. This is because the heatmap does a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap visualize how clusters are formed and how they merge at different levels of similarity.\n\n\n\n\n\n\nNote\n\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nHere, red cells denotes small values of correlation, and yellow big calues of correlation. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, which makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. This can be applied to rows or to columns following one’s needs.\nHere, we normalise the matrix column-wise\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6,\n                      cexCol = 0.8,\n                      margins = c(10, 4),\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05c.html#creating-interactive-heatmaps",
    "href": "Hands_On_Exercises/HOE05/HOE_05c.html#creating-interactive-heatmaps",
    "title": "Hands on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Creating Interactive Heatmaps",
    "text": "Creating Interactive Heatmaps\nheatmaply is an R package for building interactive cluster heatmaps that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nIntroduction to Heatmaply provides an overall understanding of the features and functions of Heatmaply package. The user manual of the package also proves handy for reference purposes.\nIn this section, we will use heatmaply to design an interactive cluster heatmap. We will exclude the country, region and outliers from the heatmap.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the right hand side of the heatmap.\nThe text label of each row, on the other hand, is placed on the left hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degrees from north.\n\n\n\n\nData trasformation\nWhen analysing multivariate data sets, it is very common that the variables in the data set includes values that reflect different types of measurements. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation is commonly carried out before clustering.\nThe three main data transformation methods supported by heatmaply() are: scale, normalise and percentilse.\n\nScaling method\nWhen all variables come from or are assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution. distribution. In such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling. In this visual we will scale variable values only columnwise:\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nNormalising method\nWhen variables in the data come from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations. This preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\nDifferent from Scaling, the normalise method is performed on the entierty of the input data set i.e. on wh_matrix\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nPercentising method\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank. This is done by using the empirical cumulative distribution function (ecdf) of the variables on their own values, bringing each value to its empirical percentile. The benefit of the percentize function is that each value has a relatively clear interpretation, which is the percent of observations that have that particular value or below.\nSimilarly to the Normalize method, the Percentize method is performed on the entierty of the input data set i.e. on wh_matrix\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nClustering algorithms\nheatmaply supports a variety of hierarchical clustering algorithms. The main arguments are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method being used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\nThe Manual Approach\nHere, the heatmap is plotted by using a hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nThe Statistical Approach\nIn order to determine the best clustering method and number of clusters, the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\n\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that the “average” method should be used because it gives the highest value.\nNext, find_k() is used to determine the optimal number of clusters.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nThe figure above shows that k=3 would be the optimum.\nWe then plot the heatmap with the optimum results.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\nSeriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. For example, with three items A, B and C, if you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It also doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we have our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here we see the result of applying Optimal Leaf Ordering to the same clustering result as the normalised heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default option is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe “mean” option gives the output we would get by default from heatmap functions in other packages such as gplots’ heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\nWorking with colour palettes\nThe The default colour palette uses by heatmaply is viridis. However, users can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nHere, we use the Blues colour palette of RColorBrewer package.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\nThe finishing touch\nBesides providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure a cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05d.html",
    "href": "Hands_On_Exercises/HOE05/HOE_05d.html",
    "title": "Hands on Exercise 05d: Visualising Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plots are data visualisations specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables at once and seeing the relationships between them. For example, we can see how the variables contribute to the Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out in Stephen Few (2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, a parallel coordinates plot can be used to characterise clusters detected during customer segmentation."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05d.html#overview",
    "href": "Hands_On_Exercises/HOE05/HOE_05d.html#overview",
    "title": "Hands on Exercise 05d: Visualising Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plots are data visualisations specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables at once and seeing the relationships between them. For example, we can see how the variables contribute to the Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out in Stephen Few (2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, a parallel coordinates plot can be used to characterise clusters detected during customer segmentation."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05d.html#loading-data",
    "href": "Hands_On_Exercises/HOE05/HOE_05d.html#loading-data",
    "title": "Hands on Exercise 05d: Visualising Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following packages:\n\nGGally, for plotting statistic parallel coordinates plots by using ggparcoord()\nparcoords , for plotting interactive parallel coordinates plots;\nparallelPlot , also for plotting interactive parallel coordinates plots ;\ntidyverse, a family of R packages for data science processes.\n\n\npacman::p_load(GGally, parcoords, parallelPlot, tidyverse)\n\nWe will be using the World Happiness Report 2018, which has be extracted and reduced to a simplified csv.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05d.html#plotting-static-parallel-coordinates",
    "href": "Hands_On_Exercises/HOE05/HOE_05d.html#plotting-static-parallel-coordinates",
    "title": "Hands on Exercise 05d: Visualising Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Plotting Static Parallel Coordinates",
    "text": "Plotting Static Parallel Coordinates\nIn this section, we will plot static parallel coordinates by using ggparcoord() of the GGally package.\n\nPlotting a simple parallel coordinates\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that only two arguments, namely data and columns, are used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates.\n\n\n\n\nPlotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaningful information from the World Happiness measures. Hence, we provide a makeover to the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scales each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\n\nParallel coordinates with facet\nSince ggparcoord() is developed by extending the ggplot2 package, we can combine it with some of the ggplot2 functions when plotting a parallel coordinates.\nHere, we use facet_wrap() of ggplot2 to plot 10 small multiple parallel coordinates, where each plot represents one geographical region (e.g. “East Asia”).\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(strip.text = element_text(size = 8))\n\n\n\n\n\n\n\n\nOne of the aesthetic defects of the current design is that most of the variable names overlap on x-axis.\n\n\nRotating x-axis text label\nTo make the x-axis text label easy to read, we will rotate the labels by 30 degrees. We can rotate axis text labels using the theme() function in ggplot2 as shown below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(strip.text = element_text(size = 8),\n        axis.text.x = element_text(angle = 30, size = 6))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nTo rotate x-axis text labels, we use axis.text.x as an argument to the theme() function. We specify element_text(angle = 30) to rotate the x-axis text by an angle of 30 degrees, and size = 6 to make the font size smaller.\n\n\n\n\nAdjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot. We can avoid this by adjusting the text location using the hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(strip.text = element_text(size = 8),\n        axis.text.x = element_text(angle = 30, size = 6, hjust = 1))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands_On_Exercises/HOE05/HOE_05d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands on Exercise 05d: Visualising Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using htmlwidgets package and d3.js. In this section, we will use functions provided in parallelPlot package to build interactive parallel coordinates.\n\nThe basic plot\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\n\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nOne of the aesthetic defects of the current design is that some of the variable names overlap on the axis label.\n\n\nRotate axis label\nWe use the rotateTitle argument to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive features of parallelPlot is we can click on a variable of interest, for example Happiness score, and the monotonous blue colour (default) will change to a color mapping with a different intensity colour scheme.\n\n\nChanging the colour scheme\nWe can change the default interactive colour scheme by using continousCS argument as shown below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nParallel coordinates plot with histogram\nHere the histoVisibility argument is used to plot histograms along the axis of each variable. We have to set the histovisibility to TRUE for all fo the variables to be able to display all of them, so we use rep(TRUE, ncol(wh))\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05d.html#references",
    "href": "Hands_On_Exercises/HOE05/HOE_05d.html#references",
    "title": "Hands on Exercise 05d: Visualising Multivariate Analysis with Parallel Coordinates Plot",
    "section": "References",
    "text": "References\n\nggparcoord() of GGally package\nparcoords documentation\nparallelPlot"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05e.html",
    "href": "Hands_On_Exercises/HOE05/HOE_05e.html",
    "title": "Hands on Exercise 05e: Treemap Visualisation with R",
    "section": "",
    "text": "In this exercise, we will be designing treemaps using the appropriate R packages. There will be three sections to the exercise:\nFirst, we will manipulate transaction data into a treemap strcuture by using selected functions provided in the dplyr package. Second, we will plot static treemaps by using the treemap package. Third, we will design an interactive treemap by using the d3treeR package."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05e.html#overview",
    "href": "Hands_On_Exercises/HOE05/HOE_05e.html#overview",
    "title": "Hands on Exercise 05e: Treemap Visualisation with R",
    "section": "",
    "text": "In this exercise, we will be designing treemaps using the appropriate R packages. There will be three sections to the exercise:\nFirst, we will manipulate transaction data into a treemap strcuture by using selected functions provided in the dplyr package. Second, we will plot static treemaps by using the treemap package. Third, we will design an interactive treemap by using the d3treeR package."
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05e.html#loading-data",
    "href": "Hands_On_Exercises/HOE05/HOE_05e.html#loading-data",
    "title": "Hands on Exercise 05e: Treemap Visualisation with R",
    "section": "Loading Data",
    "text": "Loading Data\nWe will be using the following packages:\n\ntreemap, for draw treemaps, a space-filling visualization of hierarchical structures.\ntreemapify provides ggplot2 geoms for drawing treemaps.;\ntidyverse, a family of R packages for data science processes.\n\n\npacman::p_load(treemap, treemapify, tidyverse)\n\nWe will be using REALIS2018.csv, which provides information of private property transaction records in Singapore from 2018.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05e.html#data-wrangling",
    "href": "Hands_On_Exercises/HOE05/HOE_05e.html#data-wrangling",
    "title": "Hands on Exercise 05e: Treemap Visualisation with R",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nThe tibble data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs (functions) of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When the verbs above are applied on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouped variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nThis webpage provides some useful context on dplyr methods.\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\nGrouped summaries without the Pipe\nWe perform the steps above, and save the grouped and summarised data as different objects with the following:\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`, `Planning Region`, `Planning Area`, `Property Type`, `Type of Sale`)\n\nrealis2018_summarised &lt;- summarise(realis2018_grouped, `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), `Total Area` = sum(`Area (sqm)`, na.rm = TRUE), `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\nGrouped summaries with the pipe\nA more efficient way to tackle the same processes by using the pipe %&gt;% is shown below:\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05e.html#designing-treemap-with-treemap-package",
    "href": "Hands_On_Exercises/HOE05/HOE_05e.html#designing-treemap-with-treemap-package",
    "title": "Hands on Exercise 05e: Treemap Visualisation with R",
    "section": "Designing Treemap with treemap Package",
    "text": "Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\nDesigning a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017. We will use records belonging to “resale condominium” property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\nUsing the basic arguments\nWe design a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the arguments used\n\n\n\nIndex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, as above, the first name forms the highest aggregation level, the second name forms the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because its values will be used to map the sizes of the rectangles of the treemaps.\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, as is the case above, treemap() assumes type = \"index\", which in our case is the hierarchy of planning areas.\n\n\n\n\nWorking with vColor and type arguments\nWe now define the type argument as type = \"value\"\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\n\nThe rectangles are coloured with different intensities of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\n\n\nColours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\nThe “value” type treemap\nThe following is a “value” type treemap with a different colour palette.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\n\nAlthough the colour palette used is RdYlBu, there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nWe see only 5000 to 45000 in the legend because the range argument is at its default c(min(values, max(values)) with rounding.\n\n\n\n\n\nThe “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\nThe colour scheme used is very confusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as “RdYlBu” if the values are all positive or negative\n\n\nThe confusion can be overcome by using a single colour palette such as “Blues”.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nTreemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, with its “pivot-by-size” algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account, with acceptable aspect ratios.\n\n\nWorking with algorithm argument\nWe plot a “squarified” treemap by changing the algorithm argument\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nUsing sortID\nWhen “pivotSize” algorithm is used, the sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05e.html#designing-treemap-using-treemapify-package",
    "href": "Hands_On_Exercises/HOE05/HOE_05e.html#designing-treemap-using-treemapify-package",
    "title": "Hands on Exercise 05e: Treemap Visualisation with R",
    "section": "Designing Treemap using treemapify Package",
    "text": "Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, we will design treemps to closely resemble treemaps in the previous section by using treemapify. The Introduction to “treemapify” and user guide are useful here.\n\nDesigning a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\nDefining hierarchy\nWe group by Planning Region.\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nMake another group by Planning Area.\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdd boundary lines i.e. borders\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")\n\n\n\n\n\n\n\n\nAdd text for clarity\n\nggplot(data = realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\", size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\") +\n  geom_treemap_subgroup_text(place = \"centre\", grow = TRUE, alpha = 0.8, colour = \"white\", fontface = \"bold\") + \n  geom_treemap_subgroup2_text(place = \"centre\", grow = TRUE, alpha = 0.8, colour = \"white\", fontface = \"italic\")"
  },
  {
    "objectID": "Hands_On_Exercises/HOE05/HOE_05e.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands_On_Exercises/HOE05/HOE_05e.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands on Exercise 05e: Treemap Visualisation with R",
    "section": "Designing Interactive Treemap using d3treeR",
    "text": "Designing Interactive Treemap using d3treeR\n\nInstalling d3treeR package\nThis package is available in CRAN as d3Tree, but is not a stable working environment yet. We use the one available on github instead.\n\nWe first need to install devtools package. We skip this if our system already has the package installed.\n\n\n# install.packages(\"devtools\")\n\n\nThen, we load the devtools library and install the d3treeR package from github by using the codes below.\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nWe can now load the d3treeR package.\n\n\nlibrary(d3treeR)\n\n\n\nDesigning An Interactive Treemap\nThe codes below perform two processes:\n\ntreemap() is used to build a treemap by using selected variables in the condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\ntm\n\n$tm\n     Planning Region    Planning Area vSize     vColor stdErr vColorValue level\n1     Central Region           Bishan   698   749211.5    698    749211.5     2\n2     Central Region      Bukit Merah   708   689448.0    708    689448.0     2\n3     Central Region      Bukit Timah  1171  2823552.5   1171   2823552.5     2\n4     Central Region    Downtown Core   439   570894.0    439    570894.0     2\n5     Central Region          Geylang  1489  2140814.5   1489   2140814.5     2\n6     Central Region          Kallang   757  1415268.0    757   1415268.0     2\n7     Central Region    Marine Parade   490  1397529.5    490   1397529.5     2\n8     Central Region           Museum    28   135893.0     28    135893.0     2\n9     Central Region             &lt;NA&gt; 10825 20978846.5  10825  20978846.5     1\n10    Central Region           Newton   268  1306816.0    268   1306816.0     2\n11    Central Region           Novena   732  2483944.5    732   2483944.5     2\n12    Central Region          Orchard    42   251834.5     42    251834.5     2\n13    Central Region           Outram    23   130671.0     23    130671.0     2\n14    Central Region       Queenstown  1432   953979.5   1432    953979.5     2\n15    Central Region     River Valley   587  1998014.0    587   1998014.0     2\n16    Central Region           Rochor   132   520971.0    132    520971.0     2\n17    Central Region  Singapore River   107   378001.0    107    378001.0     2\n18    Central Region Southern Islands    49   173903.0     49    173903.0     2\n19    Central Region          Tanglin   415  2187332.0    415   2187332.0     2\n20    Central Region        Toa Payoh  1258   670769.0   1258    670769.0     2\n21       East Region            Bedok  1810  3529868.5   1810   3529868.5     2\n22       East Region           Changi     5    20564.0      5     20564.0     2\n23       East Region             &lt;NA&gt;  3775  4616987.5   3775   4616987.5     1\n24       East Region        Pasir Ris   950   669171.0    950    669171.0     2\n25       East Region         Tampines  1010   397384.0   1010    397384.0     2\n26 North East Region       Ang Mo Kio   316   640722.5    316    640722.5     2\n27 North East Region          Hougang  1875  1617014.5   1875   1617014.5     2\n28 North East Region             &lt;NA&gt;  4835  4208661.0   4835   4208661.0     1\n29 North East Region          Punggol   313   126110.0    313    126110.0     2\n30 North East Region         Sengkang  1244   348343.5   1244    348343.5     2\n31 North East Region        Serangoon  1087  1476470.5   1087   1476470.5     2\n32      North Region           Mandai    29    62025.0     29     62025.0     2\n33      North Region             &lt;NA&gt;  1117   866745.0   1117    866745.0     1\n34      North Region        Sembawang   286   244075.0    286    244075.0     2\n35      North Region     Sungei Kadut     5    24359.0      5     24359.0     2\n36      North Region        Woodlands   271   164195.0    271    164195.0     2\n37      North Region           Yishun   436   313496.0    436    313496.0     2\n38      North Region           YISHUN    90    58595.0     90     58595.0     2\n39       West Region      Bukit Batok   583   618812.5    583    618812.5     2\n40       West Region    Bukit Panjang   285   374543.5    285    374543.5     2\n41       West Region    Choa Chu Kang   268   125114.0    268    125114.0     2\n42       West Region         Clementi  1167   531398.5   1167    531398.5     2\n43       West Region      Jurong East    71    65122.0     71     65122.0     2\n44       West Region      Jurong West   279   204900.0    279    204900.0     2\n45       West Region             &lt;NA&gt;  2653  1919890.5   2653   1919890.5     1\n          x0         y0           w           h   color\n1  0.3275971 0.39738809 0.138897168 0.216561105 #D9EF8B\n2  0.1867100 0.39738809 0.140887099 0.216561105 #DCF090\n3  0.0000000 0.34367306 0.186710023 0.270276129 #219B51\n4  0.3035037 0.17159339 0.083785567 0.225794695 #E0F295\n5  0.0000000 0.61394919 0.166214405 0.386050808 #66BD63\n6  0.0000000 0.16895143 0.186710023 0.174721631 #A6D96A\n7  0.1867100 0.00000000 0.116793665 0.180798665 #ABDB6D\n8  0.4321286 0.02884175 0.034365659 0.035111694 #FBFDB9\n9  0.0000000 0.00000000 0.466494290 1.000000000 #006837\n10 0.3035037 0.00000000 0.067305826 0.171593392 #B0DD70\n11 0.0000000 0.00000000 0.186710023 0.168951432 #40AA59\n12 0.4038275 0.00000000 0.028301131 0.063953443 #F3FAAF\n13 0.4321286 0.00000000 0.034365659 0.028841749 #FBFDB9\n14 0.1662144 0.61394919 0.159851597 0.386050808 #C9E881\n15 0.1867100 0.18079867 0.116793665 0.216589422 #72C264\n16 0.3708095 0.06395344 0.052846822 0.107639949 #E4F39A\n17 0.4236563 0.06395344 0.042837954 0.107639949 #ECF7A4\n18 0.3708095 0.00000000 0.033017986 0.063953443 #F7FBB4\n19 0.3872893 0.17159339 0.079205035 0.225794695 #66BD63\n20 0.3260660 0.61394919 0.140428288 0.386050808 #DCF090\n21 0.7660878 0.66653971 0.233912202 0.333460292 #006837\n22 0.8863175 0.30452342 0.113682520 0.001895373 #FFFFBF\n23 0.7660878 0.30452342 0.233912202 0.695476575 #006837\n24 0.8863175 0.30641880 0.113682520 0.360120910 #DCF090\n25 0.7660878 0.30452342 0.120229681 0.362016283 #ECF7A4\n26 0.6562718 0.42735132 0.109816035 0.124005158 #DCF090\n27 0.4664943 0.55135648 0.180101901 0.448643524 #99D368\n28 0.4664943 0.30452342 0.299593508 0.695476575 #006837\n29 0.6562718 0.30452342 0.109816035 0.122827894 #FBFDB9\n30 0.6465962 0.55135648 0.119491608 0.448643524 #EFF8AA\n31 0.4664943 0.30452342 0.189777473 0.246833051 #A6D96A\n32 0.9503779 0.00000000 0.042324766 0.029527172 #FFFFBF\n33 0.8419295 0.00000000 0.158070525 0.304523425 #CEEA84\n34 0.9373848 0.10768733 0.062615194 0.196836090 #F3FAAF\n35 0.9927026 0.00000000 0.007297373 0.029527172 #FFFFBF\n36 0.8419295 0.00000000 0.108448385 0.107687335 #F7FBB4\n37 0.8419295 0.10768733 0.095455331 0.196836090 #EFF8AA\n38 0.9503779 0.02952717 0.049622139 0.078160162 #FFFFBF\n39 0.6316405 0.09998753 0.122833675 0.204535895 #E0F295\n40 0.6316405 0.00000000 0.122833675 0.099987530 #ECF7A4\n41 0.7544742 0.03498570 0.087455313 0.132058702 #FBFDB9\n42 0.4664943 0.00000000 0.165146197 0.304523425 #E4F39A\n43 0.7544742 0.00000000 0.087455313 0.034985701 #FFFFBF\n44 0.7544742 0.16704440 0.087455313 0.137479022 #F7FBB4\n45 0.4664943 0.00000000 0.375435185 0.304523425 #79C565\n\n$type\n[1] \"value\"\n\n$vSize\n[1] \"Total Unit Sold\"\n\n$vColor\n[1] \"Median Unit Price ($ psm)\"\n\n$stdErr\n[1] \"Total Unit Sold\"\n\n$algorithm\n[1] \"pivotSize\"\n\n$vpCoorX\n[1] 0.02812148 0.97187852\n\n$vpCoorY\n[1] 0.171685 0.910315\n\n$aspRatio\n[1] 1.788798\n\n$range\n[1]       0 3500000\n\n$mapping\n[1] NA NA NA\n\n$draw\n[1] TRUE\n\n\nThen, d3tree() is used to build an interactive treemap.\n\nd3tree(tm, rootname = \"Singapore\" )"
  },
  {
    "objectID": "Take_Home_Exercises/THE_01/THE_01.html",
    "href": "Take_Home_Exercises/THE_01/THE_01.html",
    "title": "Take Home Exercise 01: Insights in Shippinh Data",
    "section": "",
    "text": "The maritime sector a critical component of global trade, contributing significantly to increasing standards of living around the world, and requiring sustainability in this changing economic climate. Understanding ship performance, fuel efficiency, and operational cost factors are essential for improving decision-making and minimizing environmental impact."
  },
  {
    "objectID": "Take_Home_Exercises/THE_01/THE_01.html#overview",
    "href": "Take_Home_Exercises/THE_01/THE_01.html#overview",
    "title": "Take Home Exercise 01: Insights in Shippinh Data",
    "section": "",
    "text": "The maritime sector a critical component of global trade, contributing significantly to increasing standards of living around the world, and requiring sustainability in this changing economic climate. Understanding ship performance, fuel efficiency, and operational cost factors are essential for improving decision-making and minimizing environmental impact."
  },
  {
    "objectID": "Take_Home_Exercises/THE_01/THE_01.html#loading-data",
    "href": "Take_Home_Exercises/THE_01/THE_01.html#loading-data",
    "title": "Take Home Exercise 01: Insights in Shippinh Data",
    "section": "Loading Data",
    "text": "Loading Data\n\npacman::p_load(tidyverse)\n\nWe will be using the Ship Performance Dataset, which is synthetic data generated to realistically represent key operational metrics and attributes of different ship types in the Gulf of Guinea in Africa. This will enable us to perform maritime data analytics for clustering, prediction, and optimization of the industry.\n\nship_performance &lt;- read_csv(\"data/Ship_Performance_Dataset.csv\")\n\nThe dataset consists of 2736 rows and 18 columns, with features split into numerical and categorical types.\nThe numerical features consist of the following:\n\nSpeed_Over_Ground_knots: Average speed of the ship over water (in knots).\nEngine_Power_kW: Engine power output (in kilowatts).\nDistance_Traveled_nm: Total distance traveled by the ship (in nautical miles).\nOperational_Cost_USD: Total operational cost per voyage (in USD).\nRevenue_per_Voyage_USD: Revenue generated per voyage (in USD).\nEfficiency_nm_per_kWh: Energy efficiency calculated in nautical miles per kilowatt-hour.\n\nThe categorical features are the following:\n\nShip_Type: Type of ship (e.g., Tanker, Container Ship, Fish Carrier, Bulk Carrier).\nRoute_Type: Shipping route type (e.g., Short-haul, Long-haul, Transoceanic).\nEngine_Type: Type of engine (e.g., Diesel, Heavy Fuel Oil).\nMaintenance_Status: Maintenance condition of the ship (e.g., Fair, Critical, Good).\nWeather_Condition: Prevailing weather conditions during voyages (e.g., Calm, Moderate, Rough)."
  },
  {
    "objectID": "Take_Home_Exercises/THE_01/THE_01.html#eda-and-visualisations",
    "href": "Take_Home_Exercises/THE_01/THE_01.html#eda-and-visualisations",
    "title": "Take Home Exercise 01: Insights in Shippinh Data",
    "section": "EDA and Visualisations",
    "text": "EDA and Visualisations\nWe first perform some exploratory data analysis to better understand what we are working with.\n\nView the first few rows\n\nhead(ship_performance)\n\n# A tibble: 6 × 18\n  Date       Ship_Type      Route_Type   Engine_Type          Maintenance_Status\n  &lt;date&gt;     &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;                &lt;chr&gt;             \n1 2023-06-04 Container Ship None         Heavy Fuel Oil (HFO) Critical          \n2 2023-06-11 Fish Carrier   Short-haul   Steam Turbine        Good              \n3 2023-06-18 Container Ship Long-haul    Diesel               Fair              \n4 2023-06-25 Bulk Carrier   Transoceanic Steam Turbine        Fair              \n5 2023-07-02 Fish Carrier   Transoceanic Diesel               Fair              \n6 2023-07-09 Fish Carrier   Long-haul    Heavy Fuel Oil (HFO) Fair              \n# ℹ 13 more variables: Speed_Over_Ground_knots &lt;dbl&gt;, Engine_Power_kW &lt;dbl&gt;,\n#   Distance_Traveled_nm &lt;dbl&gt;, Draft_meters &lt;dbl&gt;, Weather_Condition &lt;chr&gt;,\n#   Cargo_Weight_tons &lt;dbl&gt;, Operational_Cost_USD &lt;dbl&gt;,\n#   Revenue_per_Voyage_USD &lt;dbl&gt;, Turnaround_Time_hours &lt;dbl&gt;,\n#   Efficiency_nm_per_kWh &lt;dbl&gt;, Seasonal_Impact_Score &lt;dbl&gt;,\n#   Weekly_Voyage_Count &lt;dbl&gt;, Average_Load_Percentage &lt;dbl&gt;\n\n\n\n\nCheck for missing values\n\ncolSums(is.na(ship_performance))\n\n                   Date               Ship_Type              Route_Type \n                      0                       0                       0 \n            Engine_Type      Maintenance_Status Speed_Over_Ground_knots \n                      0                       0                       0 \n        Engine_Power_kW    Distance_Traveled_nm            Draft_meters \n                      0                       0                       0 \n      Weather_Condition       Cargo_Weight_tons    Operational_Cost_USD \n                      0                       0                       0 \n Revenue_per_Voyage_USD   Turnaround_Time_hours   Efficiency_nm_per_kWh \n                      0                       0                       0 \n  Seasonal_Impact_Score     Weekly_Voyage_Count Average_Load_Percentage \n                      0                       0                       0 \n\n\nAccording to the above code chunk, all the columns have 0 missing values, but visual inspection of the first 5 rows reveal the existence of missing-like values such as “None”. This suggests that those missing values are not being recognized as NA.\nWe will change the missing values in categorical columns to NA and drop any rows with missing values.\n\nship_performance &lt;- ship_performance %&gt;%\n  mutate(across(where(is.character), ~na_if(.x, \"None\")))\n\ncolSums(is.na(ship_performance))\n\n                   Date               Ship_Type              Route_Type \n                      0                     136                     136 \n            Engine_Type      Maintenance_Status Speed_Over_Ground_knots \n                    136                     136                       0 \n        Engine_Power_kW    Distance_Traveled_nm            Draft_meters \n                      0                       0                       0 \n      Weather_Condition       Cargo_Weight_tons    Operational_Cost_USD \n                    136                       0                       0 \n Revenue_per_Voyage_USD   Turnaround_Time_hours   Efficiency_nm_per_kWh \n                      0                       0                       0 \n  Seasonal_Impact_Score     Weekly_Voyage_Count Average_Load_Percentage \n                      0                       0                       0 \n\n\nWe can see now that quite a number of columns have missing values, and that each column has exactly 136 missing data\n\nrows_missing &lt;- ship_performance %&gt;%\n  distinct() %&gt;%\n  filter(rowSums(is.na(.)) &gt; 0) %&gt;%\n  nrow()\n\ncat(\"Percentage of rows with missing values:\", (rows_missing / nrow(ship_performance)) * 100, \"%\\n\")\n\nPercentage of rows with missing values: 22.25877 %\n\n\nSince the percentage of rows with missing values is high, istead of dropping rows and missing critical data, we will\n\n\nAnalyse the structure of the dataset\n\nstr(ship_performance)\n\ntibble [2,736 × 18] (S3: tbl_df/tbl/data.frame)\n $ Date                   : Date[1:2736], format: \"2023-06-04\" \"2023-06-11\" ...\n $ Ship_Type              : chr [1:2736] \"Container Ship\" \"Fish Carrier\" \"Container Ship\" \"Bulk Carrier\" ...\n $ Route_Type             : chr [1:2736] NA \"Short-haul\" \"Long-haul\" \"Transoceanic\" ...\n $ Engine_Type            : chr [1:2736] \"Heavy Fuel Oil (HFO)\" \"Steam Turbine\" \"Diesel\" \"Steam Turbine\" ...\n $ Maintenance_Status     : chr [1:2736] \"Critical\" \"Good\" \"Fair\" \"Fair\" ...\n $ Speed_Over_Ground_knots: num [1:2736] 12.6 10.4 20.7 21.1 13.7 ...\n $ Engine_Power_kW        : num [1:2736] 2063 1796 1649 915 1090 ...\n $ Distance_Traveled_nm   : num [1:2736] 1031 1060 659 1127 1445 ...\n $ Draft_meters           : num [1:2736] 14.13 14.65 7.2 11.79 9.73 ...\n $ Weather_Condition      : chr [1:2736] \"Moderate\" \"Rough\" \"Moderate\" \"Moderate\" ...\n $ Cargo_Weight_tons      : num [1:2736] 1959 162 178 1737 261 ...\n $ Operational_Cost_USD   : num [1:2736] 483832 483388 448543 261350 287718 ...\n $ Revenue_per_Voyage_USD : num [1:2736] 292183 883766 394019 87551 676121 ...\n $ Turnaround_Time_hours  : num [1:2736] 25.9 63.2 49.4 22.4 64.2 ...\n $ Efficiency_nm_per_kWh  : num [1:2736] 1.455 0.29 0.5 0.703 1.331 ...\n $ Seasonal_Impact_Score  : num [1:2736] 1.416 0.886 1.406 1.371 0.583 ...\n $ Weekly_Voyage_Count    : num [1:2736] 1 6 9 1 8 7 3 6 8 2 ...\n $ Average_Load_Percentage: num [1:2736] 93.8 93.9 96.2 66.2 80 ...\n\n\nThere are now XXXXXX rows and still 18 columns.\nWe will convert the Date column to Date data type for better extraction of time and seasonlity related features\n\nship_performance$Date &lt;- as.Date(ship_performance$Date, format=\"%Y-%m-%d\")\n\n\n\nExtract summary statistics\n\nsummary(ship_performance)\n\n      Date             Ship_Type          Route_Type        Engine_Type       \n Min.   :2023-06-04   Length:2736        Length:2736        Length:2736       \n 1st Qu.:2023-09-10   Class :character   Class :character   Class :character  \n Median :2023-12-17   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-12-17                                                           \n 3rd Qu.:2024-03-24                                                           \n Max.   :2024-06-30                                                           \n Maintenance_Status Speed_Over_Ground_knots Engine_Power_kW\n Length:2736        Min.   :10.01           Min.   : 501   \n Class :character   1st Qu.:13.93           1st Qu.:1148   \n Mode  :character   Median :17.71           Median :1757   \n                    Mean   :17.60           Mean   :1758   \n                    3rd Qu.:21.28           3rd Qu.:2383   \n                    Max.   :25.00           Max.   :2999   \n Distance_Traveled_nm  Draft_meters    Weather_Condition  Cargo_Weight_tons\n Min.   :  50.43      Min.   : 5.002   Length:2736        Min.   :  50.23  \n 1st Qu.: 548.51      1st Qu.: 7.437   Class :character   1st Qu.: 553.98  \n Median :1037.82      Median : 9.919   Mode  :character   Median :1043.21  \n Mean   :1036.41      Mean   : 9.929                      Mean   :1032.57  \n 3rd Qu.:1540.93      3rd Qu.:12.413                      3rd Qu.:1527.72  \n Max.   :1998.34      Max.   :14.993                      Max.   :1999.13  \n Operational_Cost_USD Revenue_per_Voyage_USD Turnaround_Time_hours\n Min.   : 10092       Min.   : 50352         Min.   :12.02        \n 1st Qu.:131293       1st Qu.:290346         1st Qu.:26.17        \n Median :257158       Median :520177         Median :41.59        \n Mean   :255143       Mean   :521362         Mean   :41.75        \n 3rd Qu.:381797       3rd Qu.:750073         3rd Qu.:57.36        \n Max.   :499735       Max.   :999917         Max.   :71.97        \n Efficiency_nm_per_kWh Seasonal_Impact_Score Weekly_Voyage_Count\n Min.   :0.1002        Min.   :0.500         Min.   :1.000      \n 1st Qu.:0.4636        1st Qu.:0.758         1st Qu.:3.000      \n Median :0.7899        Median :1.009         Median :5.000      \n Mean   :0.7987        Mean   :1.004         Mean   :4.915      \n 3rd Qu.:1.1474        3rd Qu.:1.253         3rd Qu.:7.000      \n Max.   :1.4993        Max.   :1.499         Max.   :9.000      \n Average_Load_Percentage\n Min.   : 50.01         \n 1st Qu.: 62.70         \n Median : 75.50         \n Mean   : 75.22         \n 3rd Qu.: 87.72         \n Max.   :100.00"
  }
]