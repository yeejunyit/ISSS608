---
title: "In Class Exercise 05: Model Building and Summaries"
author: "Yee Jun Yit"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
editor: visual
---

## Getting Started

We will be introduced to a new package [**gtsummary**](https://cran.r-project.org/web/packages/gtsummary/gtsummary.pdf), which provides an elegant and flexible way to create publication-ready analytical and summary tables.

```{r}
pacman::p_load(readxl, SmartEDA, easystats, gtsummary, tidyverse)
```

## Loading Data

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", "data")
```

## Data Overview

We have the option of using the following built-in R functions.

```{r, eval=FALSE}
glimpse(car_resale)
summary(car_resale)
list(car_resale)
str(car_resale)
```

But we will use the ExpData() function from the **SmartEDA** package. There are two types of exploration, `type = 1` provides an overall data summary.

```{r}
car_resale %>%
  ExpData(type = 1)
```

While `type = 2` provides a variable level summary.

```{r}
car_resale %>%
  ExpData(type = 2)
```

## Data Wrangling

It would be better to work with factors instead of strings for categorical data, so we convert the categorical data into factors.

```{r}
cols <- c("Mfg_Month", "HP_Bin", "CC_bin", "Doors", "Gears", "Cylinders", "Fuel_Type", "Color", "Met_Color", "Automatic", "BOVAG_Guarantee", "ABS", "Airbag_1", "Airbag_2", "Airco", "Automatic_airco", "Boardcomputer", "CD_Player", "Central_Lock", "Powered_Windows", "Power_Steering", "Radio", "Mistlamps", "Sport_Model", "Backseat_Divider", "Metallic_Rim", "Radio_cassette", "Tow_Bar")

car_resale <- read_xls("data/ToyotaCorolla.xls", "data") %>%
  mutate(Id=as.character(Id)) %>%
  mutate(across(all_of(cols), as.factor))
```

### Numerical variables

We use `ExpNumViz()` from **SmartEDA** package to visualise the density of numerical columns.

```{r}
car_resale %>%
  ExpNumViz(target=NULL,
            nlim=10,
            Page=c(2,2))
```

::: callout-note
### Note

The `nlim` argument excludes numeric variables which have less than the specified number of unique values.
:::

We now set the target label as the "Price" of the car.

```{r}
car_resale %>%
  ExpNumViz(target="Price",
            nlim=10,
            Page=c(2,2))
```

### Categorical Variables

We then visualise the categorical columns.

```{r}
#| fig-width: 12
#| fig-height: 14

car_resale %>%
  ExpCatViz(target=NULL,
            col="sky blue",
            clim=10,
            margin=2,
            Page=c(4,4),
            sample=16)
```

::: callout-note
### Note

From the [documentation](https://www.rdocumentation.org/packages/SmartEDA/versions/0.3.10/topics/ExpCatViz), we can see the following:

-   `clim` argument is the maximum number of categories to be considered to be included in each bar graph
-   `margin` argument is an indexing argument. `1` is for row based proportions and `2` for column based proportions.
-   `sample` is the number of categorical variables selected randomly
:::

### Multicollinearity Check

We check for multicollinearity, first by building a linear model:

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period,
            data = car_resale)
model
```

Then doing the multicollinearity check.

```{r}
check_collinearity(model)
```

We plot the VIF to visualise the values better.

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

We remove "MFG_Year" as it's VIF value is the highest, removing it's collinearity with "Age_08_04" and proceed with the rest of the variables.

## Model Building and Verification

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period,
            data = car_resale)
```

We then check for normality.

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period,
            data = car_resale)
check_normality(model1)
```

Normal is a good fit as p-value is less than 0.1%.

We then check for Heteroscedasticity (non-constant error variance).

```{r}
check_heteroscedasticity(model1)
```

Error variance is fine as p-value is also less than 0.1%.

We do a full check on the linear model without "MFG_Year"

```{r}
#| fig-width: 12
check_model(model1)
```

(1) From Homogeneity of Variance, we can see two clusters: one for the left cluster, and one for the right sparser cluster. This suggests that we should build two models for the data.
(2) The Influential Observations contain an outlier (coloured red). We can consider removing this value and remodelling the data.

## Model Summary

We could use the built in R function `summary()`.

```{r}
summary(model1)
```

The data is presented very inelegantly. We do a basic visualisation.

```{r}
plot(parameters(model1))
```

This is better as statistics are presented together.

```{r}
library(ggstatsplot)

ggcoefstats(model1,
            output = "plot")
```

We use the `tbl_regression()` of **gtsummary** package for a elegant summary.

```{r}
tbl_regression(model1,
               intercept=TRUE)
```

The following adds statistics together with the table.

```{r}
tbl_regression(model1,
               intercept=TRUE) %>%
  add_glance_source_note(
    label = list(sigma~ "\U03C3"),
    include = c(r.squared, adj.r.squared,
                AIC, statistic,
                p.value, sigma)
    )
```
